CREATE OR REPLACE PACKAGE T24_CDMEMO_ACTIVITY_PKG IS

    FUNCTION CALC_HOLD_VAL_FUNC(
        P_FROM_DATE     IN VARCHAR2,
        P_TODAY         IN VARCHAR2,
        P_LOCKED_AMOUNT IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_CBAL_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_ACCINT_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER;

    PROCEDURE GEN_FROM_ACC_PROC;

    PROCEDURE GEN_FROM_ARR_PROC;

    PROCEDURE GEN_FROM_ECB_PROC;

    PROCEDURE GEN_FROM_ADL_PROC;

END T24_CDMEMO_ACTIVITY_PKG;

CREATE OR REPLACE PACKAGE BODY T24_CDMEMO_ACTIVITY_PKG IS

    FUNCTION CALC_HOLD_VAL_FUNC(
        P_FROM_DATE     IN VARCHAR2,
        P_TODAY         IN VARCHAR2,
        P_LOCKED_AMOUNT IN VARCHAR2
    ) RETURN NUMBER IS
        V_HOLD          NUMBER;
        V_PAST          NUMBER;
        V_START         PLS_INTEGER := 1;
        V_LEN           PLS_INTEGER := LENGTH(P_FROM_DATE);
        V_COLON_IDX     PLS_INTEGER;
        V_HASH_IDX      PLS_INTEGER;
        V_M_VAL         VARCHAR2(6);
        V_FROM_DATE     VARCHAR2(8);
        V_LOCKED_AMOUNT NUMBER;
    BEGIN
        IF P_LOCKED_AMOUNT IS NULL THEN
            RETURN 0;
        END IF;

        V_HOLD := TO_NUMBER(T24_UTILS_PKG.GET_LAST_VAL_FUNC(P_LOCKED_AMOUNT));

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_FROM_DATE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_FROM_DATE, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_M_VAL         := SUBSTR(P_FROM_DATE, V_START, V_COLON_IDX - V_START);
            V_FROM_DATE     := SUBSTR(P_FROM_DATE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_LOCKED_AMOUNT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_LOCKED_AMOUNT, V_M_VAL);

            IF V_FROM_DATE > P_TODAY THEN
                V_HOLD := GREATEST(V_HOLD, V_LOCKED_AMOUNT);
            ELSE
                V_PAST := V_LOCKED_AMOUNT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN GREATEST(V_HOLD, NVL(V_PAST, V_HOLD));
    END CALC_HOLD_VAL_FUNC;

    FUNCTION CALC_CBAL_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER IS
        V_CBAL              NUMBER := 0;
        V_START             PLS_INTEGER := 1;
        V_LEN               PLS_INTEGER := LENGTH(P_CURR_ASSET_TYPE);
        V_COLON_IDX         PLS_INTEGER;
        V_HASH_IDX          PLS_INTEGER;
        V_M_VAL             VARCHAR2(6);
        V_CURR_ASSET_TYPE   VARCHAR2(50);
    BEGIN
        IF P_CURR_ASSET_TYPE IS NULL THEN
            RETURN 0;
        END IF;

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_CURR_ASSET_TYPE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_CURR_ASSET_TYPE, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_M_VAL            := SUBSTR(P_CURR_ASSET_TYPE, V_START, V_COLON_IDX - V_START);
            V_CURR_ASSET_TYPE  := SUBSTR(P_CURR_ASSET_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_CURR_ASSET_TYPE IN ('CURACCOUNT', 'PAYACCOUNT') THEN
                V_CBAL := V_CBAL
                    + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OPEN_BALANCE, V_M_VAL)
                    + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CREDIT_MVMT, V_M_VAL)
                    + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_DEBIT_MVMT, V_M_VAL);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_CBAL;
    END CALC_CBAL_VAL_FUNC;

    FUNCTION CALC_ACCINT_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER IS
        V_ACCINT           NUMBER := 0;
        V_START            PLS_INTEGER := 1;
        V_LEN              PLS_INTEGER := LENGTH(P_CURR_ASSET_TYPE);
        V_COLON_IDX        PLS_INTEGER;
        V_HASH_IDX         PLS_INTEGER;
        V_M_VAL            VARCHAR2(4);
        V_CURR_ASSET_TYPE  VARCHAR2(50);
    BEGIN
        IF P_CURR_ASSET_TYPE IS NULL THEN
            RETURN 0;
        END IF;

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_CURR_ASSET_TYPE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_CURR_ASSET_TYPE, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_M_VAL            := SUBSTR(P_CURR_ASSET_TYPE, V_START, V_COLON_IDX - V_START);
            V_CURR_ASSET_TYPE  := SUBSTR(P_CURR_ASSET_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_CURR_ASSET_TYPE = 'ACCDEPOSITINT' THEN
                V_ACCINT := V_ACCINT
                    + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OPEN_BALANCE, V_M_VAL)
                    + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CREDIT_MVMT, V_M_VAL)
                    + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_DEBIT_MVMT, V_M_VAL);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_ACCINT;
    END CALC_ACCINT_VAL_FUNC;
-- ##################################################
    PROCEDURE GEN_FROM_ACC_PROC IS
        V_RECID_LIST     T_RECID_ARRAY;
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_CDMEMO_ACTIVITY_ACC CDC
        WHERE EXISTS (
            SELECT 1 FROM FMSB_ACC_MAPPED ACC
            WHERE ACC.RECID = CDC.RECID AND CDC.WINDOW_ID <= ACC.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;
    
        SELECT TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT INTO T24_CDMEMO_ACTIVITY (
            ACCTNO, CURTYP, CDNUM, CBAL, HOLD, 
            STATUS, ACCINT, WDRWH, PENAMT, 
            WINDOW_ID, COMMIT_TS, REPLICAT_TS, MAPPED_TS, CALL_CDC
        )
        SELECT
            TO_NUMBER(ACC.RECID) AS ACCTNO,
            ACC.CURRENCY AS CURTYP,
            TO_NUMBER(ACC.RECID) AS CDNUM,
            CALC_CBAL_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS CBAL, 
            CALC_HOLD_VAL_FUNC(ACC.FROM_DATE, V_TODAY, ACC.LOCKED_AMOUNT) AS HOLD,
            CASE
                WHEN ARR.ARR_STATUS IN ('CLOSE', 'PENDING.CLOSURE', 'CANCELLED') THEN 2
                WHEN ARR.ARR_STATUS IN ('MATURED', 'EXPIRED') THEN 3
                WHEN ARR.ARR_STATUS IN ('AUTH', 'AUTH-FWD') OR ARR.START_DATE = V_TODAY THEN 4
                WHEN PST.RESTRICTION_TYPE IN ('ALL', 'DEBIT') THEN 6
                ELSE 1
            END AS STATUS,
            CALC_ACCINT_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS ACCINT,
            0 AS WDRWH,
            0 AS PENAMT,
            ACC.WINDOW_ID,
            ACC.COMMIT_TS,
            ACC.REPLICAT_TS,
            ACC.MAPPED_TS,
            'ACC'
        FROM TABLE(V_WINDOW_ID_LIST) V
        JOIN FMSB_ACC_MAPPED ACC ON ACC.WINDOW_ID = V.COLUMN_VALUE
        JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID = ACC.RECID
        JOIN FMSB_ARR_CD ARR ON ARR.LINKED_APPL_ID = ACC.RECID
        JOIN FMSB_ADL_MAPPED ADL ON ADL.RECID = ARR.RECID
        LEFT JOIN F_PST_MAPPED PST ON PST.RECID = ACC.POSTING_RESTRICT

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ACC_PROC;

    PROCEDURE GEN_FROM_ECB_PROC IS
        V_RECID_LIST     T_RECID_ARRAY;
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_CDMEMO_ACTIVITY_ECB CDC
        WHERE EXISTS (
            SELECT 1 FROM FMSB_ECB_MAPPED ECB
            WHERE ECB.RECID = CDC.RECID AND CDC.WINDOW_ID <= ECB.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;
    
        SELECT TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT INTO T24_CDMEMO_ACTIVITY (
            ACCTNO, CURTYP, CDNUM, CBAL, HOLD, 
            STATUS, ACCINT, WDRWH, PENAMT, 
            WINDOW_ID, COMMIT_TS, REPLICAT_TS, MAPPED_TS, CALL_CDC
        )
        SELECT
            TO_NUMBER(ECB.RECID) AS ACCTNO,
            ACC.CURRENCY AS CURTYP,
            TO_NUMBER(ACC.RECID) AS CDNUM,
            CALC_CBAL_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS CBAL, 
            CALC_HOLD_VAL_FUNC(ACC.FROM_DATE, V_TODAY, ACC.LOCKED_AMOUNT) AS HOLD,
            CASE
                WHEN ARR.ARR_STATUS IN ('CLOSE', 'PENDING.CLOSURE', 'CANCELLED') THEN 2
                WHEN ARR.ARR_STATUS IN ('MATURED', 'EXPIRED') THEN 3
                WHEN ARR.ARR_STATUS IN ('AUTH', 'AUTH-FWD') OR ARR.START_DATE = V_TODAY THEN 4
                WHEN PST.RESTRICTION_TYPE IN ('ALL', 'DEBIT') THEN 6
                ELSE 1
            END AS STATUS,
            CALC_ACCINT_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS ACCINT,
            0 AS WDRWH,
            0 AS PENAMT,
            ECB.WINDOW_ID,
            ECB.COMMIT_TS,
            ECB.REPLICAT_TS,
            ECB.MAPPED_TS,
            'ECB' -- CALL_CDC
        FROM TABLE(V_WINDOW_ID_LIST) V
        JOIN FMSB_ECB_MAPPED ECB ON ECB.WINDOW_ID = V.COLUMN_VALUE
        JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID = ECB.RECID
        JOIN FMSB_ARR_CD ARR ON ARR.LINKED_APPL_ID = ECB.RECID
        JOIN FMSB_ADL_MAPPED ADL ON ADL.RECID = ARR.RECID
        LEFT JOIN F_PST_MAPPED PST ON PST.RECID = ACC.POSTING_RESTRICT

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ECB_PROC;

    PROCEDURE GEN_FROM_ARR_PROC IS
        V_RECID_LIST     T_RECID_ARRAY;
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_CDMEMO_ACTIVITY_ARR CDC
        WHERE EXISTS (
            SELECT 1 FROM FMSB_ARR_CD ARR
            WHERE ARR.RECID = CDC.RECID AND CDC.WINDOW_ID <= ARR.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;
    
        SELECT TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT INTO T24_CDMEMO_ACTIVITY (
            ACCTNO, CURTYP, CDNUM, CBAL, HOLD, 
            STATUS, ACCINT, WDRWH, PENAMT, 
            WINDOW_ID, COMMIT_TS, REPLICAT_TS, MAPPED_TS, CALL_CDC
        )
        SELECT
            TO_NUMBER(ARR.LINKED_APPL_ID) AS ACCTNO,
            ACC.CURRENCY AS CURTYP,
            TO_NUMBER(ACC.RECID) AS CDNUM,
            CALC_CBAL_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS CBAL, 
            CALC_HOLD_VAL_FUNC(ACC.FROM_DATE, V_TODAY, ACC.LOCKED_AMOUNT) AS HOLD,
            CASE
                WHEN ARR.ARR_STATUS IN ('CLOSE', 'PENDING.CLOSURE', 'CANCELLED') THEN 2
                WHEN ARR.ARR_STATUS IN ('MATURED', 'EXPIRED') THEN 3
                WHEN ARR.ARR_STATUS IN ('AUTH', 'AUTH-FWD') OR ARR.START_DATE = V_TODAY THEN 4
                WHEN PST.RESTRICTION_TYPE IN ('ALL', 'DEBIT') THEN 6
                ELSE 1
            END AS STATUS,
            CALC_ACCINT_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS ACCINT,
            0 AS WDRWH,
            0 AS PENAMT
            ARR.WINDOW_ID,
            ARR.COMMIT_TS,
            ARR.REPLICAT_TS,
            ARR.MAPPED_TS,
            'ARR' -- CALL_CDC
        FROM TABLE(V_WINDOW_ID_LIST) V
        JOIN FMSB_ARR_CD ARR ON ARR.WINDOW_ID = V.COLUMN_VALUE
        JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID = ARR.LINKED_APPL_ID
        JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID = ARR.LINKED_APPL_ID
        JOIN FMSB_ADL_MAPPED ADL ON ADL.RECID = ARR.RECID
        LEFT JOIN F_PST_MAPPED PST ON PST.RECID = ACC.POSTING_RESTRICT

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ARR_PROC;

    PROCEDURE GEN_FROM_ADL_PROC IS
        V_RECID_LIST     T_RECID_ARRAY;
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_CDMEMO_ACTIVITY_ADL CDC
        WHERE EXISTS (
            SELECT 1 FROM FMSB_ADL_MAPPED ARR
            WHERE ADL.RECID = CDC.RECID AND CDC.WINDOW_ID <= ADL.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;
    
        SELECT TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT INTO T24_CDMEMO_ACTIVITY (
            ACCTNO, CURTYP, CDNUM, CBAL, HOLD, 
            STATUS, ACCINT, WDRWH, PENAMT, 
            WINDOW_ID, COMMIT_TS, REPLICAT_TS, MAPPED_TS, CALL_CDC
        )
        SELECT
            TO_NUMBER(ARR.LINKED_APPL_ID) AS ACCTNO,
            ACC.CURRENCY AS CURTYP,
            TO_NUMBER(ACC.RECID) AS CDNUM,
            CALC_CBAL_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS CBAL, 
            CALC_HOLD_VAL_FUNC(ACC.FROM_DATE, V_TODAY, ACC.LOCKED_AMOUNT) AS HOLD,
            CASE
                WHEN ARR.ARR_STATUS IN ('CLOSE', 'PENDING.CLOSURE', 'CANCELLED') THEN 2
                WHEN ARR.ARR_STATUS IN ('MATURED', 'EXPIRED') THEN 3
                WHEN ARR.ARR_STATUS IN ('AUTH', 'AUTH-FWD') OR ARR.START_DATE = V_TODAY THEN 4
                WHEN PST.RESTRICTION_TYPE IN ('ALL', 'DEBIT') THEN 6
                ELSE 1
            END AS STATUS,
            CALC_ACCINT_VAL_FUNC(ECB.CURR_ASSET_TYPE, ECB.OPEN_BALANCE, ECB.CREDIT_MVMT, ECB.DEBIT_MVMT) AS ACCINT,
            0 AS WDRWH,
            0 AS PENAMT,
            ADL.WINDOW_ID,
            ADL.COMMIT_TS,
            ADL.REPLICAT_TS,
            ADL.MAPPED_TS,
            'ADL' -- CALL_CDC
        FROM TABLE(V_WINDOW_ID_LIST) V
        JOIN FMSB_ADL_MAPPED ADL ON ADL.WINDOW_ID = V.COLUMN_VALUE
        JOIN FMSB_ARR_CD ARR ON ARR.RECID = ADL.RECID
        JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID = ARR.LINKED_APPL_ID
        JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID = ARR.LINKED_APPL_ID        
        LEFT JOIN F_PST_MAPPED PST ON PST.RECID = ACC.POSTING_RESTRICT

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ADL_PROC;

END T24_CDMEMO_ACTIVITY_PKG;
