CREATE TABLE T24_LNMEMO_ACTIVITY_ARR
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_ARR_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_ARR (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY_BIL
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_BIL_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_BIL (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY_ECB
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_ECB_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_ECB (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY_ACC
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_ACC_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_ACC (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARR_LNMEMO
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    LINKED_APPL_ID VARCHAR2(255),
    CONSTRAINT PK_FMSB_ARR_LNMEMO PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_WINDOW_ID
    ON FMSB_ARR_LNMEMO (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_REC_WIN_ID
    ON FMSB_ARR_LNMEMO (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_LINKED_APPL_ID
    ON FMSB_ARR_LNMEMO (LINKED_APPL_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_BIL_LNMEMO
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT_ID VARCHAR2(255),
    BILPRN_AMT     NUMBER(15, 2),
    BILINT_AMT     NUMBER(13, 2),
    BILLC_AMT      NUMBER(13, 2),
    CONSTRAINT PK_FMSB_BIL_LNMEMO PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_WINDOW_ID
    ON FMSB_BIL_LNMEMO (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_REC_WIN_ID
    ON FMSB_BIL_LNMEMO (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_ARRANGEMENT_ID
    ON FMSB_BIL_LNMEMO (ARRANGEMENT_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARC_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT    VARCHAR2(255),
    ACTIVITY_CLASS VARCHAR2(255),
    ACTIVITY       VARCHAR2(255),
    EFFECTIVE_DATE VARCHAR2(8),
    INPUTTER       VARCHAR2(255),
    CONSTRAINT PK_FMSB_ARC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARC_MAPPED_ARRANGEMENT
    ON FMSB_ARC_MAPPED (ARRANGEMENT)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ATA_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    ID_COMP_1       VARCHAR2(255),
    ID_COMP_3       VARCHAR2(255),
    ACTIVITY        VARCHAR2(255),
    AMOUNT          VARCHAR2(255),
    MATURITY_DATE   VARCHAR2(8),
    MSB_OR_LNMAT_DT VARCHAR2(8),
    TERM            VARCHAR2(255),
    CONSTRAINT PK_FMSB_ATA_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;


CREATE TABLE FMSB_AIT_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    ID_COMP_1       VARCHAR2(255),
    ID_COMP_2       VARCHAR2(255),
    ID_COMP_3       VARCHAR2(255),
    EFFECTIVE_RATE  VARCHAR2(255),
    FLOATING_INDEX  VARCHAR2(255),
    PERIODIC_PERIOD VARCHAR2(255),
    CONSTRAINT PK_FMSB_AIT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_SUP_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    LOC_FIELD_NAME VARCHAR2(1000),
    CONSTRAINT PK_F_SUP_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_BIL_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT_ID VARCHAR2(255),
    BILL_TYPE      VARCHAR2(1000),
    BILL_STATUS    VARCHAR2(255),
    OR_PR_AMT      VARCHAR2(500),
    OS_PR_AMT      VARCHAR2(500),
    PAY_PROPERTY   VARCHAR2(1000),
    PAYMENT_TYPE   VARCHAR2(1000),
    CONSTRAINT PK_FMSB_BIL_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_PST_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    RESTRICTION_TYPE VARCHAR2(255),
    CONSTRAINT PK_F_PST_MAPPED PRIMARY KEY (RECID)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_AAC_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ID_COMP_1      VARCHAR2(255),
    ID_COMP_3      VARCHAR2(255),
    MSB_LN_PURPOSE VARCHAR2(5),
    CONSTRAINT PK_FMSB_AAC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_TMV_MAPPED
(
    RECID              VARCHAR2(255),
    WINDOW_ID          NUMBER(25),
    OP_TYPE            CHAR(1),
    COMMIT_TS          TIMESTAMP(3),
    REPLICAT_TS        TIMESTAMP(3),
    MAPPED_TS          TIMESTAMP(3),
    ORIGINAL_FT_NUMBER VARCHAR2(255),
    RESERVED1          VARCHAR2(255),
    RESERVED2          VARCHAR2(255),
    PAYMENT_DIRECTION  VARCHAR2(3),
    CONSTRAINT PK_F_TMV_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_FT_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    CHARGES_ACCT_NO VARCHAR2(255),
    MSB_CHANNEL     VARCHAR2(255),
    MSB_TRANS_CODE  VARCHAR2(255),
    MSB_TRANS_SEQ   VARCHAR2(255),
    PAYMENT_DETAILS VARCHAR2(255),
    CONSTRAINT PK_FMSB_FT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ADL_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    MATURITY_DATE   VARCHAR2(8),
    RENEWAL_DATE    VARCHAR2(8),
    DORMANCY_STATUS VARCHAR2(255),
    CONSTRAINT PK_FMSB_ADL_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ADL_MAPPED_REC_WIN_ID
    ON FMSB_ADL_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_CAT_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    AMOUNT_FCY       VARCHAR2(255),
    AMOUNT_LCY       VARCHAR2(255),
    AUTHORISER       VARCHAR2(255),
    BOOKING_DATE     VARCHAR2(8),
    CO_CODE          VARCHAR2(255),
    CONSOL_KEY       VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    DATE_TIME        VARCHAR2(255),
    INPUTTER         VARCHAR2(255),
    NARRATIVE        VARCHAR2(255),
    PL_CATEGORY      VARCHAR2(10),
    PRODUCT_CATEGORY VARCHAR2(10),
    RECORD_STATUS    VARCHAR2(255),
    SOFT_ACCTNG_DTLS VARCHAR2(255),
    SYSTEM_ID        VARCHAR2(10),
    TRANS_REFERENCE  VARCHAR2(255),
    TRANSACTION_CODE VARCHAR2(10),
    VALUE_DATE       VARCHAR2(8),
    CONSTRAINT PK_FMSB_CAT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_CHG_MAPPED
(
    RECID         VARCHAR2(255),
    WINDOW_ID     NUMBER(25),
    OP_TYPE       CHAR(1),
    COMMIT_TS     TIMESTAMP(3),
    REPLICAT_TS   TIMESTAMP(3),
    MAPPED_TS     TIMESTAMP(3),
    ID_COMP_1     VARCHAR2(255),
    ID_COMP_3     VARCHAR2(255),
    CHANGE_PERIOD VARCHAR2(255),
    CHANGE_DATE   VARCHAR2(8),
    CONSTRAINT PK_FMSB_CHG_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_AC_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    DEBIT_ACCOUNT  VARCHAR2(255),
    REMARKS        VARCHAR2(255),
    MSB_CHANNEL    VARCHAR2(255),
    MSB_TRANS_CODE VARCHAR2(255),
    MSB_TRANS_SEQ  VARCHAR2(255),
    CONSTRAINT PK_FMSB_AC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARR_MAPPED
(
    RECID              VARCHAR2(255),
    WINDOW_ID          NUMBER(25),
    OP_TYPE            CHAR(1),
    COMMIT_TS          TIMESTAMP(3),
    REPLICAT_TS        TIMESTAMP(3),
    MAPPED_TS          TIMESTAMP(3),
    ACTIVE_PRODUCT     VARCHAR2(255),
    ARR_STATUS         VARCHAR2(255),
    CURRENCY           VARCHAR2(5),
    LINKED_APPL_ID     VARCHAR2(255),
    ORIG_CONTRACT_DATE VARCHAR2(8),
    PRODUCT_LINE       VARCHAR2(1000),
    PRODUCT_STATUS     VARCHAR2(1000),
    PRODUCT            VARCHAR2(1000),
    START_DATE         VARCHAR2(8),
    CONSTRAINT PK_FMSB_ARR_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_MAPPED_REC_WIN_ID
    ON FMSB_ARR_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_MAPPED_LINKED_APPL_ID
    ON FMSB_ARR_MAPPED (LINKED_APPL_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_TR_MAPPED
(
    RECID       VARCHAR2(255),
    WINDOW_ID   NUMBER(25),
    OP_TYPE     CHAR(1),
    COMMIT_TS   TIMESTAMP(3),
    REPLICAT_TS TIMESTAMP(3),
    MAPPED_TS   TIMESTAMP(3),
    NARRATIVE_1 VARCHAR2(255),
    NARRATIVE_2 VARCHAR2(255),
    CONSTRAINT PK_FMSB_TR_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_FX_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    NOTES           VARCHAR2(255),
    AMOUNT_BOUGHT   VARCHAR2(255),
    CURRENCY_BOUGHT VARCHAR2(5),
    AMOUNT_SOLD     VARCHAR2(255),
    CURRENCY_SOLD   VARCHAR2(5),
    CONSTRAINT PK_FMSB_FX_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ECB_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    CREDIT_MVMT     VARCHAR2(1000),
    CURR_ASSET_TYPE VARCHAR2(1000),
    DEBIT_MVMT      VARCHAR2(1000),
    OPEN_BALANCE    VARCHAR2(1000),
    CONSTRAINT PK_FMSB_ECB_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ECB_MAPPED_WINDOW_ID
    ON FMSB_ECB_MAPPED (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ECB_MAPPED_REC_WIN_ID
    ON FMSB_ECB_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_POR_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    STATUS_CODE    VARCHAR2(255),
    OUTPUT_CHANNEL VARCHAR2(255),
    CONSTRAINT PK_F_POR_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ASC_MAPPED
(
    RECID        VARCHAR2(255),
    WINDOW_ID    NUMBER(25),
    OP_TYPE      CHAR(1),
    COMMIT_TS    TIMESTAMP(3),
    REPLICAT_TS  TIMESTAMP(3),
    MAPPED_TS    TIMESTAMP(3),
    ID_COMP_1    VARCHAR2(255),
    ID_COMP_3    VARCHAR2(255),
    BILL_TYPE    VARCHAR2(1000),
    CALC_AMOUNT  VARCHAR2(255),
    PAYMENT_FREQ VARCHAR2(1000),
    PROPERTY     VARCHAR2(1000),
    CONSTRAINT PK_FMSB_ASC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_BIT_MAPPED
(
    RECID         VARCHAR2(255),
    WINDOW_ID     NUMBER(25),
    OP_TYPE       CHAR(1),
    COMMIT_TS     TIMESTAMP(3),
    REPLICAT_TS   TIMESTAMP(3),
    MAPPED_TS     TIMESTAMP(3),
    BCCY          VARCHAR2(255),
    INTEREST_RATE VARCHAR2(255),
    CONSTRAINT PK_FMSB_BIT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_DAT_MAPPED
(
    RECID       VARCHAR2(255),
    WINDOW_ID   NUMBER(25),
    OP_TYPE     CHAR(1),
    COMMIT_TS   TIMESTAMP(3),
    REPLICAT_TS TIMESTAMP(3),
    MAPPED_TS   TIMESTAMP(3),
    TODAY       VARCHAR2(8),
    CONSTRAINT PK_F_DAT_MAPPED PRIMARY KEY (RECID)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_STM_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    ACCOUNT_NUMBER   VARCHAR2(255),
    AMOUNT_FCY       VARCHAR2(255),
    AMOUNT_LCY       VARCHAR2(255),
    BOOKING_DATE     VARCHAR2(8),
    CRF_TYPE         VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    DATE_TIME        VARCHAR2(255),
    INPUTTER         VARCHAR2(255),
    NARRATIVE_1      VARCHAR2(255),
    NARRATIVE        VARCHAR2(1000),
    OUR_REFERENCE    VARCHAR2(255),
    PRODUCT_CATEGORY VARCHAR2(10),
    RECORD_STATUS    VARCHAR2(255),
    REVERSAL_MARKER  VARCHAR2(255),
    SYSTEM_ID        VARCHAR2(10),
    TRANS_REFERENCE  VARCHAR2(255),
    TRANSACTION_CODE VARCHAR2(10),
    VALUE_DATE       VARCHAR2(8),
    CONSTRAINT PK_FMSB_STM_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_REC_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    AMOUNT_FCY       VARCHAR2(255),
    AMOUNT_LCY       VARCHAR2(255),
    AUTHORISER       VARCHAR2(255),
    BOOKING_DATE     VARCHAR2(8),
    CO_CODE          VARCHAR2(255),
    CONSOL_KEY_TYPE  VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    DATE_TIME        VARCHAR2(255),
    DEAL_NUMBER      VARCHAR2(255),
    INPUTTER         VARCHAR2(255),
    NARRATIVE        VARCHAR2(255),
    PRODUCT_CATEGORY VARCHAR2(10),
    RECORD_STATUS    VARCHAR2(255),
    SOFT_ACCTNG_DTLS VARCHAR2(255),
    SYSTEM_ID        VARCHAR2(10),
    TRANS_REFERENCE  VARCHAR2(255),
    TRANSACTION_CODE VARCHAR2(10),
    VALUE_DATE       VARCHAR2(8),
    CONSTRAINT PK_FMSB_REC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ACC_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    CATEGORY         VARCHAR2(255),
    CO_CODE          VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    CUSTOMER         VARCHAR2(255),
    FROM_DATE        VARCHAR2(2000),
    INPUTTER         VARCHAR2(1000),
    LIMIT_KEY        VARCHAR2(255),
    LOCKED_AMOUNT    VARCHAR2(2000),
    OPENING_DATE     VARCHAR2(10),
    POSTING_RESTRICT VARCHAR2(255),
    ACNAME           VARCHAR2(255),
    CONSTRAINT PK_FMSB_ACC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ACC_MAPPED_WINDOW_ID
    ON FMSB_ACC_MAPPED (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ACC_MAPPED_REC_WIN_ID
    ON FMSB_ACC_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_LMT_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    INTERNAL_AMOUNT VARCHAR2(255),
    CONSTRAINT PK_FMSB_LMT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_LMT_MAPPED_REC_WIN_ID
    ON FMSB_LMT_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY
(
    ACCTNO       NUMBER(19, 0),
    CURTYP       VARCHAR2(4),
    CBAL         NUMBER(15, 2),
    HOLD         NUMBER(15, 2),
    DRLIMT       NUMBER(18, 2), --NUMBER(15, 2) 
    ACCINT       NUMBER(17, 5),
    COMACC       NUMBER(15, 5),
    OTHCHG       NUMBER(13, 2),
    BILPRN       NUMBER(15, 2),
    BILINT       NUMBER(13, 2),
    BILESC       NUMBER(13, 2),
    BILLC        NUMBER(13, 2),
    BILOC        NUMBER(13, 2),
    BILMC        NUMBER(13, 2),
    WINDOW_ID    NUMBER(25, 0),
    COMMIT_TS    TIMESTAMP(3),
    REPLICAT_TS  TIMESTAMP(3),
    MAPPED_TS    TIMESTAMP(3),
    CHANGED_TIME TIMESTAMP(3) DEFAULT SYSTIMESTAMP,
    CALL_CDC     VARCHAR2(3)
)
    TABLESPACE T24DB_OGGDS;

CREATE OR REPLACE TYPE T_WINDOW_ID_ARRAY AS TABLE OF NUMBER(25);

CREATE OR REPLACE PACKAGE T24_UTILS_PKG IS

    FUNCTION GET_LAST_VAL_FUNC(
        P_INPUT IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_STR_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_NUM_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION MEMO_EXCEED_FUNC(
        P_INPUT IN NUMBER,
        P_PRECISION IN NUMBER,
        P_SCALE IN NUMBER
    ) RETURN NUMBER;

END T24_UTILS_PKG;

CREATE OR REPLACE PACKAGE BODY T24_UTILS_PKG IS

    FUNCTION GET_LAST_VAL_FUNC(
        P_INPUT IN VARCHAR2
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN SUBSTR(P_INPUT, INSTR(P_INPUT, ':', -1) + 1);
    END GET_LAST_VAL_FUNC;

    FUNCTION GET_STR_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN VARCHAR2 IS
        V_IDX    PLS_INTEGER := INSTR(P_INPUT, P_POS);
        V_START  PLS_INTEGER;
        V_END    PLS_INTEGER;
        V_RESULT VARCHAR2(255);
    BEGIN
        IF V_IDX = 0 THEN
            RETURN NULL;
        END IF;

        V_START := V_IDX + LENGTH(P_POS);
        V_END := INSTR(P_INPUT, '#', V_START);

        IF V_END = 0 THEN
            V_RESULT := SUBSTR(P_INPUT, V_START);
        ELSE
            V_RESULT := SUBSTR(P_INPUT, V_START, V_END - V_START);
        END IF;

        RETURN V_RESULT;
    END GET_STR_VAL_BY_POS_FUNC;

    FUNCTION GET_NUM_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN NUMBER IS
        V_IDX    PLS_INTEGER := INSTR(P_INPUT, P_POS);
        V_START  PLS_INTEGER;
        V_END    PLS_INTEGER;
        V_RESULT VARCHAR2(20);
    BEGIN
        IF V_IDX = 0 THEN
            RETURN 0;
        END IF;

        V_START := V_IDX + LENGTH(P_POS);
        V_END := INSTR(P_INPUT, '#', V_START);

        IF V_END = 0 THEN
            V_RESULT := SUBSTR(P_INPUT, V_START);
        ELSE
            V_RESULT := SUBSTR(P_INPUT, V_START, V_END - V_START);
        END IF;

        RETURN NVL(TO_NUMBER(V_RESULT), 0);
    END GET_NUM_VAL_BY_POS_FUNC;

    FUNCTION MEMO_EXCEED_FUNC(
        P_INPUT IN NUMBER,
        P_PRECISION IN NUMBER,
        P_SCALE IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        IF ABS(P_INPUT) < POWER(10, P_PRECISION - P_SCALE) THEN
            RETURN P_INPUT;
        ELSE
            RETURN 0;
        END IF;
    END MEMO_EXCEED_FUNC;

END T24_UTILS_PKG;

CREATE OR REPLACE PACKAGE T IS

    FUNCTION BILPRN(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION BILINT(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION BILLC(
        P_PAY_PROPERTY IN VARCHAR2,
        P_PAYMENT_TYPE IN VARCHAR2,
        P_OS_PR_AMT IN VARCHAR2,
        P_OR_PR_AMT IN VARCHAR2
    ) RETURN NUMBER;

END T;

CREATE OR REPLACE PACKAGE BODY T IS

    -- BILPRN
    FUNCTION BILPRN(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER IS
        V_START        PLS_INTEGER := 2;
        V_LEN          PLS_INTEGER := LENGTH(P_PAY_PROPERTY);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(8);
        V_PAY_PROPERTY VARCHAR2(50);
        V_BILL_TYPE    VARCHAR2(50);
        V_OS_PR_AMT    NUMBER;
        V_BILPRN       NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PAY_PROPERTY, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PAY_PROPERTY, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PAY_PROPERTY, V_START, V_COLON_IDX - V_START);

            V_PAY_PROPERTY := SUBSTR(P_PAY_PROPERTY, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_BILL_TYPE := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_BILL_TYPE, SUBSTR(V_POS, 1, INSTR(V_POS, 's') - 1) || ':');
            V_OS_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OS_PR_AMT, V_POS);

            IF V_PAY_PROPERTY = 'ACCOUNT'
            AND V_BILL_TYPE IN ('INSTALLMENT', 'INVESTORBILL', 'PAYMENT')
            AND V_OS_PR_AMT > 0
            THEN
                V_BILPRN := V_BILPRN + V_OS_PR_AMT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_BILPRN;
    END BILPRN;


    -- BILINT
    FUNCTION BILINT(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER IS
        V_START        PLS_INTEGER := 2;
        V_LEN          PLS_INTEGER := LENGTH(P_PAY_PROPERTY);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(8);
        V_PAY_PROPERTY VARCHAR2(50);
        V_BILL_TYPE    VARCHAR2(50);
        V_OS_PR_AMT    NUMBER;
        V_BILINT       NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PAY_PROPERTY, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PAY_PROPERTY, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PAY_PROPERTY, V_START, V_COLON_IDX - V_START);

            V_PAY_PROPERTY := SUBSTR(P_PAY_PROPERTY, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_BILL_TYPE := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_BILL_TYPE, SUBSTR(V_POS, 1, INSTR(V_POS, 's') - 1) || ':');
            V_OS_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OS_PR_AMT, V_POS);

            IF V_PAY_PROPERTY IN ('LOANINTEREST', 'LNINTPREBUY', 'INVESTORINT', 'RISKINTEREST')
            AND V_BILL_TYPE IN ('INSTALLMENT', 'INVESTORBILL', 'PAYMENT')
            AND V_OS_PR_AMT > 0
            THEN
                V_BILINT := V_BILINT + V_OS_PR_AMT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_BILINT;
    END BILINT;


    -- BILLC
    FUNCTION BILLC(
        P_PAY_PROPERTY IN VARCHAR2,
        P_PAYMENT_TYPE IN VARCHAR2,
        P_OS_PR_AMT IN VARCHAR2,
        P_OR_PR_AMT IN VARCHAR2
    ) RETURN NUMBER IS
        V_START        PLS_INTEGER := 2;
        V_LEN          PLS_INTEGER := LENGTH(P_PAY_PROPERTY);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(8);
        V_PAY_PROPERTY VARCHAR2(50);
        V_PAYMENT_TYPE VARCHAR2(50);
        V_OS_PR_AMT    NUMBER;
        V_OR_PR_AMT    NUMBER;
        V_BILLC        NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PAY_PROPERTY, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PAY_PROPERTY, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PAY_PROPERTY, V_START, V_COLON_IDX - V_START);

            V_PAY_PROPERTY := SUBSTR(P_PAY_PROPERTY, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_PAYMENT_TYPE := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PAYMENT_TYPE, SUBSTR(V_POS, 1, INSTR(V_POS, 's') - 1) || ':');
            V_OS_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OS_PR_AMT, V_POS);
            V_OR_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OR_PR_AMT, V_POS);

            IF V_PAY_PROPERTY IN (
                'LNPRINPEN', 'INVESTORPENINT', 'RISKPRINPEN',
                'SYNPRINPEN', 'LNINTPEN', 'RISKINTPEN', 'SYNINTPEN'
            )
            AND V_PAYMENT_TYPE IN ('CURRENT', 'PENALTY')
            AND V_OS_PR_AMT > 0
            THEN
                V_BILLC := V_BILLC + V_OR_PR_AMT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_BILLC;
    END BILLC;
    

END T;

CREATE OR REPLACE PACKAGE T24_LNMEMO_ACTIVITY_PKG IS

    FUNCTION CALC_CBAL_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_HOLD_VAL_FUNC(
        P_FROM_DATE     IN VARCHAR2,
        P_TODAY         IN VARCHAR2,
        P_LOCKED_AMOUNT IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_ACCINT_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER;

    PROCEDURE GEN_FROM_ACC_PROC;
    PROCEDURE GEN_FROM_ARR_PROC;
    PROCEDURE GEN_FROM_BIL_PROC;
    PROCEDURE GEN_FROM_ECB_PROC;

END T24_LNMEMO_ACTIVITY_PKG;

CREATE OR REPLACE PACKAGE BODY T24_LNMEMO_ACTIVITY_PKG IS

    ---------------------------------------------------------------------------
    -- CALC_CBAL_VAL_FUNC
    ---------------------------------------------------------------------------
    FUNCTION CALC_CBAL_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER IS
        V_START           PLS_INTEGER := 1;
        V_LEN             PLS_INTEGER := LENGTH(P_CURR_ASSET_TYPE);
        V_COLON_IDX       PLS_INTEGER;
        V_HASH_IDX        PLS_INTEGER;
        V_POS             VARCHAR2(6);
        V_CURR_ASSET_TYPE VARCHAR2(255);
        V_CBAL            NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_CURR_ASSET_TYPE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_CURR_ASSET_TYPE, '#', V_COLON_IDX);
            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS             := SUBSTR(P_CURR_ASSET_TYPE, V_START, V_COLON_IDX - V_START);
            V_CURR_ASSET_TYPE := SUBSTR(P_CURR_ASSET_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_CURR_ASSET_TYPE IN (
                'CURACCOUNT', 'DUEACCOUNT', 'DELACCOUNT',
                'CURACCOUNTINF', 'DUEACCOUNTINF', 'DELACCOUNTINF'
            ) THEN
                V_CBAL := V_CBAL
                       + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OPEN_BALANCE, V_POS)
                       + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CREDIT_MVMT,  V_POS)
                       + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_DEBIT_MVMT,   V_POS);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN ABS(V_CBAL);
    END CALC_CBAL_VAL_FUNC;

    ---------------------------------------------------------------------------
    -- CALC_HOLD_VAL_FUNC
    ---------------------------------------------------------------------------
    FUNCTION CALC_HOLD_VAL_FUNC(
        P_FROM_DATE     IN VARCHAR2,
        P_TODAY         IN VARCHAR2,
        P_LOCKED_AMOUNT IN VARCHAR2
    ) RETURN NUMBER IS
        V_HOLD          NUMBER;
        V_PAST          NUMBER;
        V_START         PLS_INTEGER := 1;
        V_LEN           PLS_INTEGER := LENGTH(P_FROM_DATE);
        V_COLON_IDX     PLS_INTEGER;
        V_HASH_IDX      PLS_INTEGER;
        V_POS           VARCHAR2(6);
        V_FROM_DATE     VARCHAR2(8);
        V_LOCKED_AMOUNT NUMBER;
    BEGIN
        IF P_LOCKED_AMOUNT IS NULL THEN
            RETURN 0;
        END IF;

        V_HOLD := TO_NUMBER(T24_UTILS_PKG.GET_LAST_VAL_FUNC(P_LOCKED_AMOUNT));

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_FROM_DATE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_FROM_DATE, '#', V_COLON_IDX);
            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS           := SUBSTR(P_FROM_DATE, V_START, V_COLON_IDX - V_START);
            V_FROM_DATE     := SUBSTR(P_FROM_DATE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_LOCKED_AMOUNT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_LOCKED_AMOUNT, V_POS);

            IF V_FROM_DATE > P_TODAY THEN
                V_HOLD := GREATEST(V_HOLD, V_LOCKED_AMOUNT);
            ELSE
                V_PAST := V_LOCKED_AMOUNT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN GREATEST(V_HOLD, NVL(V_PAST, V_HOLD));
    END CALC_HOLD_VAL_FUNC;

    ---------------------------------------------------------------------------
    -- CALC_ACCINT_VAL_FUNC
    ---------------------------------------------------------------------------
    FUNCTION CALC_ACCINT_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER IS
        V_START           PLS_INTEGER := 1;
        V_LEN             PLS_INTEGER := LENGTH(P_CURR_ASSET_TYPE);
        V_COLON_IDX       PLS_INTEGER;
        V_HASH_IDX        PLS_INTEGER;
        V_POS             VARCHAR2(6);
        V_CURR_ASSET_TYPE VARCHAR2(255);
        V_ACCINT          NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_CURR_ASSET_TYPE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_CURR_ASSET_TYPE, '#', V_COLON_IDX);
            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS             := SUBSTR(P_CURR_ASSET_TYPE, V_START, V_COLON_IDX - V_START);
            V_CURR_ASSET_TYPE := SUBSTR(P_CURR_ASSET_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_CURR_ASSET_TYPE IN (
                'ACCLOANINTEREST',  'ACCLNINTPREBUY',  'ACCINVESTORINT',  'ACCRISKINTEREST',  'ACCLOANINTERESTINF',
                'DUELOANINTEREST',  'DUELNINTPREBUY',  'DUEINVESTORINT',  'DUERISKINTEREST',  'DUELOANINTERESTINF',
                'DELLOANINTEREST',  'DELLNINTPREBUY',  'DELINVESTORINT',  'DELRISKINTEREST',  'DELLOANINTERESTINF'
            ) THEN
                V_ACCINT := V_ACCINT
                         + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OPEN_BALANCE, V_POS)
                         + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CREDIT_MVMT,  V_POS)
                         + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_DEBIT_MVMT,   V_POS);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN ABS(V_ACCINT);
    END CALC_ACCINT_VAL_FUNC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_ACC_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_ACC_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_ACC CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_ACC_MAPPED ACC
            WHERE ACC.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= ACC.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ACC.RECID            AS ACCTNO,
                ARR.RECID            AS ARR_RECID,
                ACC.CURRENCY         AS CURTYP,
                ECB.CURR_ASSET_TYPE  AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE     AS OPEN_BALANCE,
                ECB.CREDIT_MVMT      AS CREDIT_MVMT,
                ECB.DEBIT_MVMT       AS DEBIT_MVMT,
                ACC.FROM_DATE        AS FROM_DATE,
                ACC.LOCKED_AMOUNT    AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT  AS DRLIMT,
                ACC.WINDOW_ID        AS WINDOW_ID,
                ACC.COMMIT_TS        AS COMMIT_TS,
                ACC.REPLICAT_TS      AS REPLICAT_TS,
                ACC.MAPPED_TS        AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.WINDOW_ID      = V.COLUMN_VALUE
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID          = ACC.RECID
            LEFT  JOIN FMSB_ARR_LNMEMO ARR ON ARR.LINKED_APPL_ID = ACC.RECID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID          = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT 
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'ACC' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ACC_PROC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_ARR_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_ARR_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_ARR CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_ARR_LNMEMO ARR
            WHERE ARR.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= ARR.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ARR.LINKED_APPL_ID  AS ACCTNO,
                ARR.RECID           AS ARR_RECID,
                ACC.CURRENCY        AS CURTYP,
                ECB.CURR_ASSET_TYPE AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE    AS OPEN_BALANCE,
                ECB.CREDIT_MVMT     AS CREDIT_MVMT,
                ECB.DEBIT_MVMT      AS DEBIT_MVMT,
                ACC.FROM_DATE       AS FROM_DATE,
                ACC.LOCKED_AMOUNT   AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT AS DRLIMT,
                ARR.WINDOW_ID       AS WINDOW_ID,
                ARR.COMMIT_TS       AS COMMIT_TS,
                ARR.REPLICAT_TS     AS REPLICAT_TS,
                ARR.MAPPED_TS       AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_ARR_LNMEMO ARR ON ARR.WINDOW_ID = V.COLUMN_VALUE
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID     = ARR.LINKED_APPL_ID
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID     = ARR.LINKED_APPL_ID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID     = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT 
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'ARR' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ARR_PROC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_BIL_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_BIL_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_BIL CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_BIL_LNMEMO BIL
            WHERE BIL.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= BIL.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ARR.LINKED_APPL_ID  AS ACCTNO,
                ARR.RECID           AS ARR_RECID,
                ACC.CURRENCY        AS CURTYP,
                ECB.CURR_ASSET_TYPE AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE    AS OPEN_BALANCE,
                ECB.CREDIT_MVMT     AS CREDIT_MVMT,
                ECB.DEBIT_MVMT      AS DEBIT_MVMT,
                ACC.FROM_DATE       AS FROM_DATE,
                ACC.LOCKED_AMOUNT   AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT AS DRLIMT,
                BIL.WINDOW_ID       AS WINDOW_ID,
                BIL.COMMIT_TS       AS COMMIT_TS,
                BIL.REPLICAT_TS     AS REPLICAT_TS,
                BIL.MAPPED_TS       AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_BIL_LNMEMO BIL ON BIL.WINDOW_ID = V.COLUMN_VALUE
            LEFT  JOIN FMSB_ARR_LNMEMO ARR ON ARR.RECID     = BIL.ARRANGEMENT_ID
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID     = ARR.LINKED_APPL_ID
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID     = ACC.RECID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID     = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'BIL' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_BIL_PROC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_ECB_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_ECB_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_ECB CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_ECB_MAPPED ECB
            WHERE ECB.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= ECB.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ECB.RECID            AS ACCTNO,
                ARR.RECID            AS ARR_RECID,
                ACC.CURRENCY         AS CURTYP,
                ECB.CURR_ASSET_TYPE  AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE     AS OPEN_BALANCE,
                ECB.CREDIT_MVMT      AS CREDIT_MVMT,
                ECB.DEBIT_MVMT       AS DEBIT_MVMT,
                ACC.FROM_DATE        AS FROM_DATE,
                ACC.LOCKED_AMOUNT    AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT  AS DRLIMT,
                ECB.WINDOW_ID        AS WINDOW_ID,
                ECB.COMMIT_TS        AS COMMIT_TS,
                ECB.REPLICAT_TS      AS REPLICAT_TS,
                ECB.MAPPED_TS        AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.WINDOW_ID      = V.COLUMN_VALUE
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID          = ECB.RECID
            LEFT  JOIN FMSB_ARR_LNMEMO ARR ON ARR.LINKED_APPL_ID = ECB.RECID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID          = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'ECB' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ECB_PROC;

END T24_LNMEMO_ACTIVITY_PKG;

