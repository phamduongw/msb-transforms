CREATE TABLE T24_LNMEMO_ACTIVITY_ARR
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_ARR_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_ARR (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY_BIL
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_BIL_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_BIL (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY_ECB
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_ECB_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_ECB (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNMEMO_ACTIVITY_ACC
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNMEMO_ACTIVITY_ACC_REC_WIN_ID
    ON T24_LNMEMO_ACTIVITY_ACC (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNTNEW_ACTIVITY_ARR
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNTNEW_ACTIVITY_ARR_REC_WIN_ID
    ON T24_LNTNEW_ACTIVITY_ARR (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNTNEW_ACTIVITY_ACC
(
    RECID     VARCHAR2(255),
    WINDOW_ID NUMBER(25)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_T24_LNTNEW_ACTIVITY_ACC_REC_WIN_ID
    ON T24_LNTNEW_ACTIVITY_ACC (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARR_LNMEMO
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    LINKED_APPL_ID VARCHAR2(255),
    CONSTRAINT PK_FMSB_ARR_LNMEMO PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_OP_TYPE
    ON FMSB_ARR_LNMEMO (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_WINDOW_ID
    ON FMSB_ARR_LNMEMO (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_REC_WIN_ID
    ON FMSB_ARR_LNMEMO (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNMEMO_LINKED_APPL_ID
    ON FMSB_ARR_LNMEMO (LINKED_APPL_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_BIL_LNMEMO
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT_ID VARCHAR2(255),
    BILPRN_AMT     NUMBER(15, 2),
    BILINT_AMT     NUMBER(13, 2),
    BILLC_AMT      NUMBER(13, 2),
    CONSTRAINT PK_FMSB_BIL_LNMEMO PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_OP_TYPE
    ON FMSB_BIL_LNMEMO (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_WINDOW_ID
    ON FMSB_BIL_LNMEMO (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_REC_WIN_ID
    ON FMSB_BIL_LNMEMO (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_LNMEMO_ARRANGEMENT_ID
    ON FMSB_BIL_LNMEMO (ARRANGEMENT_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARC_LNTNEW
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT    VARCHAR2(255),
    EFFECTIVE_DATE DATE,
    CONSTRAINT PK_FMSB_ARC_LNTNEW PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARC_LNTNEW_OP_TYPE
    ON FMSB_ARC_LNTNEW (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARC_LNTNEW_ARR_EFF_DAT
    ON FMSB_ARC_LNTNEW (ARRANGEMENT, EFFECTIVE_DATE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_AIT_LNTNEW
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ID_COMP_1      VARCHAR2(255),
    ID_COMP_2      VARCHAR2(255),
    ID_COMP_3      VARCHAR2(255),
    EFFECTIVE_RATE VARCHAR2(255),
    CONSTRAINT PK_FMSB_AIT_LNTNEW PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_AIT_LNTNEW_OP_TYPE
    ON FMSB_AIT_LNTNEW (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_AIT_LNTNEW
    ON FMSB_AIT_LNTNEW (ID_COMP_1, ID_COMP_3 DESC, ID_COMP_2)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARR_LNTNEW
(
    RECID              VARCHAR2(255),
    WINDOW_ID          NUMBER(25),
    OP_TYPE            CHAR(1),
    COMMIT_TS          TIMESTAMP(3),
    REPLICAT_TS        TIMESTAMP(3),
    MAPPED_TS          TIMESTAMP(3),
    ARR_STATUS         VARCHAR2(50),
    LINKED_APPL_ID     VARCHAR2(50),
    ORIG_CONTRACT_DATE DATE,
    PRODUCT_STATUS     VARCHAR2(1000),
    PRODUCT            VARCHAR2(1000),
    START_DATE         VARCHAR2(8),
    CONSTRAINT PK_FMSB_ARR_LNTNEW PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNTNEW_OP_TYPE
    ON FMSB_ARR_LNTNEW (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNTNEW_REC_WIN_ID
    ON FMSB_ARR_LNTNEW (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_LNTNEW_LINKED_APPL_ID
    ON FMSB_ARR_LNTNEW (LINKED_APPL_ID)
    TABLESPACE T24DB_OGGDS;
CREATE TABLE FMSB_ARC_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT    VARCHAR2(255),
    ACTIVITY_CLASS VARCHAR2(255),
    ACTIVITY       VARCHAR2(255),
    EFFECTIVE_DATE VARCHAR2(8),
    INPUTTER       VARCHAR2(255),
    CONSTRAINT PK_FMSB_ARC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARC_MAPPED_OP_TYPE
    ON FMSB_ARC_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARC_MAPPED_ARRANGEMENT
    ON FMSB_ARC_MAPPED (ARRANGEMENT)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ATA_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    ID_COMP_1       VARCHAR2(255),
    ID_COMP_3       VARCHAR2(255),
    ACTIVITY        VARCHAR2(255),
    AMOUNT          VARCHAR2(255),
    MATURITY_DATE   DATE,
    MSB_OR_LNMAT_DT DATE,
    TERM            VARCHAR2(255),
    CONSTRAINT PK_FMSB_ATA_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ATA_MAPPED_OP_TYPE
    ON FMSB_ATA_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ATA_MAPPED_ID_COMP_1_ID_COMP_3_ASC
    ON FMSB_ATA_MAPPED (ID_COMP_1, ID_COMP_3 ASC)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_AIT_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    ID_COMP_1       VARCHAR2(255),
    ID_COMP_2       VARCHAR2(255),
    ID_COMP_3       VARCHAR2(255),
    EFFECTIVE_RATE  VARCHAR2(255),
    FLOATING_INDEX  VARCHAR2(255),
    PERIODIC_PERIOD VARCHAR2(255),
    CONSTRAINT PK_FMSB_AIT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_AIT_MAPPED_OP_TYPE
    ON FMSB_AIT_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_SUP_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    LOC_FIELD_NAME VARCHAR2(1000),
    CONSTRAINT PK_F_SUP_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_F_SUP_MAPPED_OP_TYPE
    ON F_SUP_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_BIL_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ARRANGEMENT_ID VARCHAR2(255),
    BILL_TYPE      VARCHAR2(1000),
    BILL_STATUS    VARCHAR2(255),
    OR_PR_AMT      VARCHAR2(500),
    OS_PR_AMT      VARCHAR2(500),
    PAY_PROPERTY   VARCHAR2(1000),
    PAYMENT_TYPE   VARCHAR2(1000),
    CONSTRAINT PK_FMSB_BIL_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIL_MAPPED_OP_TYPE
    ON FMSB_BIL_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_PST_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    RESTRICTION_TYPE VARCHAR2(255),
    CONSTRAINT PK_F_PST_MAPPED PRIMARY KEY (RECID)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_F_PST_MAPPED_OP_TYPE
    ON F_PST_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_AAC_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    ID_COMP_1      VARCHAR2(255),
    ID_COMP_3      VARCHAR2(255),
    MSB_LN_PURPOSE VARCHAR2(5),
    CONSTRAINT PK_FMSB_AAC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_AAC_MAPPED_OP_TYPE
    ON FMSB_AAC_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_AAC_MAPPED_ID_COMP_1_ID_COMP_3_DESC
    ON FMSB_AAC_MAPPED (ID_COMP_1, ID_COMP_3 DESC)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_TMV_MAPPED
(
    RECID              VARCHAR2(255),
    WINDOW_ID          NUMBER(25),
    OP_TYPE            CHAR(1),
    COMMIT_TS          TIMESTAMP(3),
    REPLICAT_TS        TIMESTAMP(3),
    MAPPED_TS          TIMESTAMP(3),
    ORIGINAL_FT_NUMBER VARCHAR2(255),
    RESERVED1          VARCHAR2(255),
    RESERVED2          VARCHAR2(255),
    PAYMENT_DIRECTION  VARCHAR2(3),
    CONSTRAINT PK_F_TMV_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_F_TMV_MAPPED_OP_TYPE
    ON F_TMV_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_FT_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    CHARGES_ACCT_NO VARCHAR2(255),
    MSB_CHANNEL     VARCHAR2(255),
    MSB_TRANS_CODE  VARCHAR2(255),
    MSB_TRANS_SEQ   VARCHAR2(255),
    PAYMENT_DETAILS VARCHAR2(255),
    CONSTRAINT PK_FMSB_FT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_FT_MAPPED_OP_TYPE
    ON FMSB_FT_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ADL_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    MATURITY_DATE   VARCHAR2(8),
    RENEWAL_DATE    VARCHAR2(8),
    DORMANCY_STATUS VARCHAR2(255),
    CONSTRAINT PK_FMSB_ADL_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ADL_MAPPED_OP_TYPE
    ON FMSB_ADL_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ADL_MAPPED_REC_WIN_ID
    ON FMSB_ADL_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_CAT_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    AMOUNT_FCY       VARCHAR2(255),
    AMOUNT_LCY       VARCHAR2(255),
    AUTHORISER       VARCHAR2(255),
    BOOKING_DATE     VARCHAR2(8),
    CO_CODE          VARCHAR2(255),
    CONSOL_KEY       VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    DATE_TIME        VARCHAR2(255),
    INPUTTER         VARCHAR2(255),
    NARRATIVE        VARCHAR2(255),
    PL_CATEGORY      VARCHAR2(10),
    PRODUCT_CATEGORY VARCHAR2(10),
    RECORD_STATUS    VARCHAR2(255),
    SOFT_ACCTNG_DTLS VARCHAR2(255),
    SYSTEM_ID        VARCHAR2(10),
    TRANS_REFERENCE  VARCHAR2(255),
    TRANSACTION_CODE VARCHAR2(10),
    VALUE_DATE       VARCHAR2(8),
    CONSTRAINT PK_FMSB_CAT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_CAT_MAPPED_OP_TYPE
    ON FMSB_CAT_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_CHG_MAPPED
(
    RECID         VARCHAR2(255),
    WINDOW_ID     NUMBER(25),
    OP_TYPE       CHAR(1),
    COMMIT_TS     TIMESTAMP(3),
    REPLICAT_TS   TIMESTAMP(3),
    MAPPED_TS     TIMESTAMP(3),
    ID_COMP_1     VARCHAR2(255),
    ID_COMP_3     VARCHAR2(255),
    CHANGE_PERIOD VARCHAR2(255),
    CHANGE_DATE   VARCHAR2(8),
    CONSTRAINT PK_FMSB_CHG_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_CHG_MAPPED_OP_TYPE
    ON FMSB_CHG_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_AC_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    DEBIT_ACCOUNT  VARCHAR2(255),
    REMARKS        VARCHAR2(255),
    MSB_CHANNEL    VARCHAR2(255),
    MSB_TRANS_CODE VARCHAR2(255),
    MSB_TRANS_SEQ  VARCHAR2(255),
    CONSTRAINT PK_FMSB_AC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_AC_MAPPED_OP_TYPE
    ON FMSB_AC_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ARR_MAPPED
(
    RECID              VARCHAR2(255),
    WINDOW_ID          NUMBER(25),
    OP_TYPE            CHAR(1),
    COMMIT_TS          TIMESTAMP(3),
    REPLICAT_TS        TIMESTAMP(3),
    MAPPED_TS          TIMESTAMP(3),
    ACTIVE_PRODUCT     VARCHAR2(255),
    ARR_STATUS         VARCHAR2(255),
    CURRENCY           VARCHAR2(5),
    LINKED_APPL_ID     VARCHAR2(255),
    ORIG_CONTRACT_DATE VARCHAR2(8),
    PRODUCT_LINE       VARCHAR2(1000),
    PRODUCT_STATUS     VARCHAR2(1000),
    PRODUCT            VARCHAR2(1000),
    START_DATE         VARCHAR2(8),
    CONSTRAINT PK_FMSB_ARR_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_MAPPED_OP_TYPE
    ON FMSB_ARR_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_MAPPED_REC_WIN_ID
    ON FMSB_ARR_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ARR_MAPPED_LINKED_APPL_ID
    ON FMSB_ARR_MAPPED (LINKED_APPL_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_TR_MAPPED
(
    RECID       VARCHAR2(255),
    WINDOW_ID   NUMBER(25),
    OP_TYPE     CHAR(1),
    COMMIT_TS   TIMESTAMP(3),
    REPLICAT_TS TIMESTAMP(3),
    MAPPED_TS   TIMESTAMP(3),
    NARRATIVE_1 VARCHAR2(255),
    NARRATIVE_2 VARCHAR2(255),
    CONSTRAINT PK_FMSB_TR_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_TR_MAPPED_OP_TYPE
    ON FMSB_TR_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_FX_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    NOTES           VARCHAR2(4000),
    AMOUNT_BOUGHT   VARCHAR2(255),
    CURRENCY_BOUGHT VARCHAR2(5),
    AMOUNT_SOLD     VARCHAR2(255),
    CURRENCY_SOLD   VARCHAR2(5),
    CONSTRAINT PK_FMSB_FX_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_FX_MAPPED_OP_TYPE
    ON FMSB_FX_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ECB_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    CREDIT_MVMT     VARCHAR2(4000),
    CURR_ASSET_TYPE VARCHAR2(4000),
    DEBIT_MVMT      VARCHAR2(4000),
    OPEN_BALANCE    VARCHAR2(4000),
    CONSTRAINT PK_FMSB_ECB_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ECB_MAPPED_OP_TYPE
    ON FMSB_ECB_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ECB_MAPPED_WINDOW_ID
    ON FMSB_ECB_MAPPED (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ECB_MAPPED_REC_WIN_ID
    ON FMSB_ECB_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_POR_MAPPED
(
    RECID          VARCHAR2(255),
    WINDOW_ID      NUMBER(25),
    OP_TYPE        CHAR(1),
    COMMIT_TS      TIMESTAMP(3),
    REPLICAT_TS    TIMESTAMP(3),
    MAPPED_TS      TIMESTAMP(3),
    STATUS_CODE    VARCHAR2(255),
    OUTPUT_CHANNEL VARCHAR2(255),
    CONSTRAINT PK_F_POR_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_F_POR_MAPPED_OP_TYPE
    ON F_POR_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ASC_MAPPED
(
    RECID        VARCHAR2(255),
    WINDOW_ID    NUMBER(25),
    OP_TYPE      CHAR(1),
    COMMIT_TS    TIMESTAMP(3),
    REPLICAT_TS  TIMESTAMP(3),
    MAPPED_TS    TIMESTAMP(3),
    ID_COMP_1    VARCHAR2(255),
    ID_COMP_3    VARCHAR2(255),
    BILL_TYPE    VARCHAR2(1000),
    CALC_AMOUNT  VARCHAR2(255),
    PAYMENT_FREQ VARCHAR2(1000),
    PROPERTY     VARCHAR2(1000),
    CONSTRAINT PK_FMSB_ASC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ASC_MAPPED_OP_TYPE
    ON FMSB_ASC_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ASC_MAPPED_ID_COMP_1_ID_COMP_3_DESC
    ON FMSB_ASC_MAPPED (ID_COMP_1, ID_COMP_3 DESC)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_BIT_MAPPED
(
    RECID         VARCHAR2(255),
    WINDOW_ID     NUMBER(25),
    OP_TYPE       CHAR(1),
    COMMIT_TS     TIMESTAMP(3),
    REPLICAT_TS   TIMESTAMP(3),
    MAPPED_TS     TIMESTAMP(3),
    BCCY          VARCHAR2(255),
    INTEREST_RATE VARCHAR2(255),
    CONSTRAINT PK_FMSB_BIT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_BIT_MAPPED_OP_TYPE
    ON FMSB_BIT_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE F_DAT_MAPPED
(
    RECID       VARCHAR2(255),
    WINDOW_ID   NUMBER(25),
    OP_TYPE     CHAR(1),
    COMMIT_TS   TIMESTAMP(3),
    REPLICAT_TS TIMESTAMP(3),
    MAPPED_TS   TIMESTAMP(3),
    TODAY       VARCHAR2(8),
    CONSTRAINT PK_F_DAT_MAPPED PRIMARY KEY (RECID)
)
    INMEMORY MEMCOMPRESS FOR QUERY LOW
    PRIORITY CRITICAL
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_F_DAT_MAPPED_OP_TYPE
    ON F_DAT_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_STM_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    ACCOUNT_NUMBER   VARCHAR2(255),
    AMOUNT_FCY       VARCHAR2(255),
    AMOUNT_LCY       VARCHAR2(255),
    BOOKING_DATE     VARCHAR2(8),
    CRF_TYPE         VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    DATE_TIME        VARCHAR2(255),
    INPUTTER         VARCHAR2(255),
    NARRATIVE_1      VARCHAR2(255),
    NARRATIVE        VARCHAR2(1000),
    OUR_REFERENCE    VARCHAR2(255),
    PRODUCT_CATEGORY VARCHAR2(10),
    RECORD_STATUS    VARCHAR2(255),
    REVERSAL_MARKER  VARCHAR2(255),
    SYSTEM_ID        VARCHAR2(10),
    TRANS_REFERENCE  VARCHAR2(255),
    TRANSACTION_CODE VARCHAR2(10),
    VALUE_DATE       VARCHAR2(8),
    CONSTRAINT PK_FMSB_STM_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_STM_MAPPED_OP_TYPE
    ON FMSB_STM_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_REC_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    AMOUNT_FCY       VARCHAR2(255),
    AMOUNT_LCY       VARCHAR2(255),
    AUTHORISER       VARCHAR2(255),
    BOOKING_DATE     VARCHAR2(8),
    CO_CODE          VARCHAR2(255),
    CONSOL_KEY_TYPE  VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    DATE_TIME        VARCHAR2(255),
    DEAL_NUMBER      VARCHAR2(255),
    INPUTTER         VARCHAR2(255),
    NARRATIVE        VARCHAR2(255),
    PRODUCT_CATEGORY VARCHAR2(10),
    RECORD_STATUS    VARCHAR2(255),
    SOFT_ACCTNG_DTLS VARCHAR2(255),
    SYSTEM_ID        VARCHAR2(10),
    TRANS_REFERENCE  VARCHAR2(255),
    TRANSACTION_CODE VARCHAR2(10),
    VALUE_DATE       VARCHAR2(8),
    CONSTRAINT PK_FMSB_REC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_REC_MAPPED_OP_TYPE
    ON FMSB_REC_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_ACC_MAPPED
(
    RECID            VARCHAR2(255),
    WINDOW_ID        NUMBER(25),
    OP_TYPE          CHAR(1),
    COMMIT_TS        TIMESTAMP(3),
    REPLICAT_TS      TIMESTAMP(3),
    MAPPED_TS        TIMESTAMP(3),
    CATEGORY         VARCHAR2(255),
    CO_CODE          VARCHAR2(255),
    CURRENCY         VARCHAR2(4),
    CUSTOMER         VARCHAR2(255),
    FROM_DATE        VARCHAR2(2000),
    INPUTTER         VARCHAR2(1000),
    LIMIT_KEY        VARCHAR2(255),
    LOCKED_AMOUNT    VARCHAR2(2000),
    OPENING_DATE     DATE,
    POSTING_RESTRICT VARCHAR2(255),
    ACNAME           VARCHAR2(255),
    CONSTRAINT PK_FMSB_ACC_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ACC_MAPPED_OP_TYPE
    ON FMSB_ACC_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ACC_MAPPED_WINDOW_ID
    ON FMSB_ACC_MAPPED (WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_ACC_MAPPED_REC_WIN_ID
    ON FMSB_ACC_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE FMSB_LMT_MAPPED
(
    RECID           VARCHAR2(255),
    WINDOW_ID       NUMBER(25),
    OP_TYPE         CHAR(1),
    COMMIT_TS       TIMESTAMP(3),
    REPLICAT_TS     TIMESTAMP(3),
    MAPPED_TS       TIMESTAMP(3),
    INTERNAL_AMOUNT VARCHAR2(255),
    CONSTRAINT PK_FMSB_LMT_MAPPED PRIMARY KEY (RECID)
)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_LMT_MAPPED_OP_TYPE
    ON FMSB_LMT_MAPPED (OP_TYPE)
    TABLESPACE T24DB_OGGDS;

CREATE INDEX IDX_FMSB_LMT_MAPPED_REC_WIN_ID
    ON FMSB_LMT_MAPPED (RECID, WINDOW_ID)
    TABLESPACE T24DB_OGGDS;

CREATE TABLE T24_LNTNEW_ACTIVITY
(
    BRN          CHAR(9),
    ACCTNO       NUMBER(19, 0),
    LNNUM        NUMBER(19, 0),
    CIFNO        NUMBER(19, 0),
    ACNAME       VARCHAR2(150),
    STATUS       NUMBER(1, 0),
    TYPE         VARCHAR2(30),
    CURTYP       VARCHAR2(4),
    ORGAMT       NUMBER(15, 2),
    DRLIMT       NUMBER(15, 2),
    HOLD         NUMBER(15, 2),
    CBAL         NUMBER(15, 2),
    OTHCHG       NUMBER(13, 2),
    ACCINT       NUMBER(17, 5),
    COMACC       NUMBER(15, 5),
    PMTAMT       NUMBER(15, 2),
    FNLPMT       NUMBER(15, 2),
    BILPRN       NUMBER(15, 2),
    BILINT       NUMBER(13, 2),
    BILESC       NUMBER(13, 2),
    BILLC        NUMBER(13, 2),
    BILOC        NUMBER(13, 2),
    BILMC        NUMBER(13, 2),
    BILLCO       NUMBER(13, 2),
    YSOBAL       NUMBER(15, 2),
    DATOPN       NUMBER(7, 0),
    FRELDT       NUMBER(7, 0),
    FULLDT       NUMBER(7, 0),
    MATDT        NUMBER(7, 0),
    RATE         NUMBER(11, 9),
    LCTYPE       NUMBER(3, 0),
    ACCMLC       CHAR(1),
    TERM         NUMBER(5, 0),
    TMCODE       CHAR(1),
    FREQ         NUMBER(3, 0),
    IPFREQ       NUMBER(3, 0),
    ODIND        CHAR(1),
    PURCOD       VARCHAR2(2),
    WINDOW_ID    NUMBER(25, 0),
    COMMIT_TS    TIMESTAMP(3),
    REPLICAT_TS  TIMESTAMP(3),
    MAPPED_TS    TIMESTAMP(3),
    CHANGED_TIME TIMESTAMP(3) DEFAULT SYSTIMESTAMP,
    CALL_CDC     VARCHAR2(3)
)
    TABLESPACE T24DB_OGGDS;
CREATE TABLE T24_LNMEMO_ACTIVITY
(
    ACCTNO       NUMBER(19, 0),
    CURTYP       VARCHAR2(4),
    CBAL         NUMBER(15, 2),
    HOLD         NUMBER(15, 2),
    DRLIMT       NUMBER(18, 2),
    ACCINT       NUMBER(17, 5),
    COMACC       NUMBER(15, 5),
    OTHCHG       NUMBER(13, 2),
    BILPRN       NUMBER(15, 2),
    BILINT       NUMBER(13, 2),
    BILESC       NUMBER(13, 2),
    BILLC        NUMBER(13, 2),
    BILOC        NUMBER(13, 2),
    BILMC        NUMBER(13, 2),
    WINDOW_ID    NUMBER(25, 0),
    COMMIT_TS    TIMESTAMP(3),
    REPLICAT_TS  TIMESTAMP(3),
    MAPPED_TS    TIMESTAMP(3),
    CHANGED_TIME TIMESTAMP(3) DEFAULT SYSTIMESTAMP,
    CALL_CDC     VARCHAR2(3)
)
    TABLESPACE T24DB_OGGDS;

CREATE OR REPLACE VIEW VW_FMSB_ASC_LNTNEW AS
SELECT ID_COMP_1,
       MAX(ID_COMP_3) AS MAX_ID_COMP_3
FROM FMSB_ASC_MAPPED
GROUP BY ID_COMP_1;
CREATE MATERIALIZED VIEW LOG ON FMSB_ASC_MAPPED
    TABLESPACE T24DB_OGGDS
    WITH ROWID, SEQUENCE (ID_COMP_1, ID_COMP_3)
    INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW MV_FMSB_ASC_LNTNEW
    TABLESPACE T24DB_OGGDS
            NOLOGGING
            CACHE
            BUILD IMMEDIATE
    REFRESH FAST ON COMMIT
AS
SELECT ID_COMP_1,
       MAX(ID_COMP_3) AS MAX_ID_COMP_3
FROM FMSB_ASC_MAPPED
GROUP BY ID_COMP_1;

CREATE UNIQUE INDEX IDX_MV_ASC_LNTNEW_ID_COMP_1
    ON MV_FMSB_ASC_LNTNEW (ID_COMP_1)
    TABLESPACE T24DB_OGGDS;
CREATE MATERIALIZED VIEW LOG ON FMSB_ARC_LNTNEW
    TABLESPACE T24DB_OGGDS
    WITH ROWID, SEQUENCE (ARRANGEMENT, EFFECTIVE_DATE)
    INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW MV_FMSB_ARC_LNTNEW
    TABLESPACE T24DB_OGGDS
            NOLOGGING
            CACHE
            BUILD IMMEDIATE
    REFRESH FAST ON COMMIT
AS
SELECT ARRANGEMENT,
       MIN(EFFECTIVE_DATE) AS MIN_EFF_DAT
FROM FMSB_ARC_LNTNEW
GROUP BY ARRANGEMENT;

CREATE UNIQUE INDEX IDX_MV_FMSB_ARC_LNTNEW_ARRANGEMENT
    ON MV_FMSB_ARC_LNTNEW (ARRANGEMENT)
    TABLESPACE T24DB_OGGDS;
CREATE MATERIALIZED VIEW LOG ON FMSB_ATA_MAPPED
    TABLESPACE T24DB_OGGDS
    WITH ROWID, SEQUENCE (ID_COMP_1, ID_COMP_3, ACTIVITY, AMOUNT)
    INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW MV_FMSB_ATA_LNTNEW
    TABLESPACE T24DB_OGGDS
            NOLOGGING
            CACHE
            BUILD IMMEDIATE
    REFRESH FAST ON COMMIT
AS
SELECT ID_COMP_1,
       MAX(ID_COMP_3)   AS MAX_ID_COMP_3,
       MIN(ID_COMP_3)   AS MIN_ID_COMP_3,
       MAX(
               CASE
                   WHEN ACTIVITY IN ('LENDING-NEW-ARRANGEMENT', 'LENDING-TAKEOVER-ARRANGEMENT')
                       THEN AMOUNT
                   ELSE '0'
                   END) AS ORGAMT
FROM FMSB_ATA_MAPPED
GROUP BY ID_COMP_1;

CREATE UNIQUE INDEX IDX_MV_FMSB_ATA_LNTNEW_ID_COMP_1
    ON MV_FMSB_ATA_LNTNEW (ID_COMP_1)
    TABLESPACE T24DB_OGGDS;
CREATE OR REPLACE VIEW VW_FMSB_ARC_LNTNEW AS
SELECT ARRANGEMENT,
       MIN(EFFECTIVE_DATE) AS MIN_EFF_DAT
FROM FMSB_ARC_LNTNEW
GROUP BY ARRANGEMENT;
CREATE OR REPLACE VIEW VW_FMSB_ATA_LNTNEW AS
SELECT ID_COMP_1,
       MIN(ID_COMP_3)   AS MIN_ID_COMP_3,
       MAX(
               CASE
                   WHEN ACTIVITY IN ('LENDING-NEW-ARRANGEMENT', 'LENDING-TAKEOVER-ARRANGEMENT')
                       THEN AMOUNT
                   ELSE '0'
                   END) AS ORGAMT
FROM FMSB_ATA_MAPPED
GROUP BY ID_COMP_1;
CREATE OR REPLACE TYPE T_WINDOW_ID_ARRAY AS TABLE OF NUMBER(25);

CREATE OR REPLACE PACKAGE T24RAW.T24_UTILS_PKG IS

    FUNCTION GET_LAST_VAL_FUNC(
        P_INPUT IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_STR_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_NUM_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION MEMO_EXCEED_FUNC(
        P_INPUT IN NUMBER,
        P_PRECISION IN NUMBER,
        P_SCALE IN NUMBER
    ) RETURN NUMBER;

END T24_UTILS_PKG;

CREATE OR REPLACE PACKAGE BODY T24RAW.T24_UTILS_PKG IS

    FUNCTION GET_LAST_VAL_FUNC(
        P_INPUT IN VARCHAR2
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN SUBSTR(P_INPUT, INSTR(P_INPUT, ':', -1) + 1);
    END GET_LAST_VAL_FUNC;

    FUNCTION GET_STR_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN VARCHAR2 IS
        V_IDX    PLS_INTEGER := INSTR(P_INPUT, P_POS);
        V_START  PLS_INTEGER;
        V_END    PLS_INTEGER;
        V_RESULT VARCHAR2(255);
    BEGIN
        IF V_IDX = 0 THEN
            RETURN NULL;
        END IF;

        V_START := V_IDX + LENGTH(P_POS);
        V_END := INSTR(P_INPUT, '#', V_START);

        IF V_END = 0 THEN
            V_RESULT := SUBSTR(P_INPUT, V_START);
        ELSE
            V_RESULT := SUBSTR(P_INPUT, V_START, V_END - V_START);
        END IF;

        RETURN V_RESULT;
    END GET_STR_VAL_BY_POS_FUNC;

    FUNCTION GET_NUM_VAL_BY_POS_FUNC(
        P_INPUT IN VARCHAR2,
        P_POS IN VARCHAR2
    ) RETURN NUMBER IS
        V_IDX    PLS_INTEGER := INSTR(P_INPUT, P_POS);
        V_START  PLS_INTEGER;
        V_END    PLS_INTEGER;
        V_RESULT VARCHAR2(20);
    BEGIN
        IF V_IDX = 0 THEN
            RETURN 0;
        END IF;

        V_START := V_IDX + LENGTH(P_POS);
        V_END := INSTR(P_INPUT, '#', V_START);

        IF V_END = 0 THEN
            V_RESULT := SUBSTR(P_INPUT, V_START);
        ELSE
            V_RESULT := SUBSTR(P_INPUT, V_START, V_END - V_START);
        END IF;

        RETURN NVL(TO_NUMBER(V_RESULT), 0);
    END GET_NUM_VAL_BY_POS_FUNC;

    FUNCTION MEMO_EXCEED_FUNC(
        P_INPUT IN NUMBER,
        P_PRECISION IN NUMBER,
        P_SCALE IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        IF ABS(P_INPUT) < POWER(10, P_PRECISION - P_SCALE) THEN
            RETURN P_INPUT;
        ELSE
            RETURN 0;
        END IF;
    END MEMO_EXCEED_FUNC;

END T24_UTILS_PKG;

CREATE OR REPLACE PACKAGE T24RAW.T IS

    FUNCTION BILPRN(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION BILINT(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION BILLC(
        P_PAY_PROPERTY IN VARCHAR2,
        P_PAYMENT_TYPE IN VARCHAR2,
        P_OS_PR_AMT IN VARCHAR2,
        P_OR_PR_AMT IN VARCHAR2
    ) RETURN NUMBER;

END T;

CREATE OR REPLACE PACKAGE BODY T24RAW.T IS

    -- BILPRN
    FUNCTION BILPRN(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER IS
        V_START        PLS_INTEGER := 2;
        V_LEN          PLS_INTEGER := LENGTH(P_PAY_PROPERTY);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(8);
        V_PAY_PROPERTY VARCHAR2(50);
        V_BILL_TYPE    VARCHAR2(50);
        V_OS_PR_AMT    NUMBER;
        V_BILPRN       NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PAY_PROPERTY, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PAY_PROPERTY, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PAY_PROPERTY, V_START, V_COLON_IDX - V_START);

            V_PAY_PROPERTY := SUBSTR(P_PAY_PROPERTY, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_BILL_TYPE := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_BILL_TYPE, SUBSTR(V_POS, 1, INSTR(V_POS, 's') - 1) || ':');
            V_OS_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OS_PR_AMT, V_POS);

            IF V_PAY_PROPERTY = 'ACCOUNT'
            AND V_BILL_TYPE IN ('INSTALLMENT', 'INVESTORBILL', 'PAYMENT')
            AND V_OS_PR_AMT > 0
            THEN
                V_BILPRN := V_BILPRN + V_OS_PR_AMT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_BILPRN;
    END BILPRN;


    -- BILINT
    FUNCTION BILINT(
        P_PAY_PROPERTY IN VARCHAR2,
        P_BILL_TYPE    IN VARCHAR2,
        P_OS_PR_AMT    IN VARCHAR2
    ) RETURN NUMBER IS
        V_START        PLS_INTEGER := 2;
        V_LEN          PLS_INTEGER := LENGTH(P_PAY_PROPERTY);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(8);
        V_PAY_PROPERTY VARCHAR2(50);
        V_BILL_TYPE    VARCHAR2(50);
        V_OS_PR_AMT    NUMBER;
        V_BILINT       NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PAY_PROPERTY, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PAY_PROPERTY, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PAY_PROPERTY, V_START, V_COLON_IDX - V_START);

            V_PAY_PROPERTY := SUBSTR(P_PAY_PROPERTY, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_BILL_TYPE := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_BILL_TYPE, SUBSTR(V_POS, 1, INSTR(V_POS, 's') - 1) || ':');
            V_OS_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OS_PR_AMT, V_POS);

            IF V_PAY_PROPERTY IN ('LOANINTEREST', 'LNINTPREBUY', 'INVESTORINT', 'RISKINTEREST')
            AND V_BILL_TYPE IN ('INSTALLMENT', 'INVESTORBILL', 'PAYMENT')
            AND V_OS_PR_AMT > 0
            THEN
                V_BILINT := V_BILINT + V_OS_PR_AMT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_BILINT;
    END BILINT;


    -- BILLC
    FUNCTION BILLC(
        P_PAY_PROPERTY IN VARCHAR2,
        P_PAYMENT_TYPE IN VARCHAR2,
        P_OS_PR_AMT IN VARCHAR2,
        P_OR_PR_AMT IN VARCHAR2
    ) RETURN NUMBER IS
        V_START        PLS_INTEGER := 2;
        V_LEN          PLS_INTEGER := LENGTH(P_PAY_PROPERTY);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(8);
        V_PAY_PROPERTY VARCHAR2(50);
        V_PAYMENT_TYPE VARCHAR2(50);
        V_OS_PR_AMT    NUMBER;
        V_OR_PR_AMT    NUMBER;
        V_BILLC        NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PAY_PROPERTY, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PAY_PROPERTY, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PAY_PROPERTY, V_START, V_COLON_IDX - V_START);

            V_PAY_PROPERTY := SUBSTR(P_PAY_PROPERTY, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_PAYMENT_TYPE := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PAYMENT_TYPE, SUBSTR(V_POS, 1, INSTR(V_POS, 's') - 1) || ':');
            V_OS_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OS_PR_AMT, V_POS);
            V_OR_PR_AMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OR_PR_AMT, V_POS);

            IF V_PAY_PROPERTY IN (
                'LNPRINPEN', 'INVESTORPENINT', 'RISKPRINPEN',
                'SYNPRINPEN', 'LNINTPEN', 'RISKINTPEN', 'SYNINTPEN'
            )
            AND V_PAYMENT_TYPE IN ('CURRENT', 'PENALTY')
            AND V_OS_PR_AMT > 0
            THEN
                V_BILLC := V_BILLC + V_OR_PR_AMT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_BILLC;
    END BILLC;
    

END T;

CREATE OR REPLACE PACKAGE T24RAW.T24_LNTNEW_ACTIVITY_PKG IS

    FUNCTION CALC_PMTAMT_VAL_FUNC(
        P_CALC_AMOUNT   IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_TYPE_VAL_FUNC(
        P_PRODUCT_STATUS IN VARCHAR2,
        P_PRODUCT        IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION CALC_FREQ_VAL_FUNC(
        P_BILL_TYPE    IN VARCHAR2,
        P_PROPERTY IN VARCHAR2,
        P_PAYMENT_FREQ IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_PURCOD_VAL_FUNC(
        P_ARR_ID IN VARCHAR2,
        P_TODAY IN VARCHAR2
    ) RETURN VARCHAR2;
   
   	FUNCTION CALC_IPFREQ_VAL_FUNC(
        P_BILL_TYPE    IN VARCHAR2,
        P_PROPERTY IN VARCHAR2,
        P_PAYMENT_FREQ IN VARCHAR2
    ) RETURN NUMBER;

    PROCEDURE GEN_FROM_ACC_PROC;

    PROCEDURE GEN_FROM_ARR_PROC;

END T24_LNTNEW_ACTIVITY_PKG;

CREATE OR REPLACE PACKAGE BODY T24RAW.T24_LNTNEW_ACTIVITY_PKG IS 

    FUNCTION CALC_PMTAMT_VAL_FUNC(
        P_CALC_AMOUNT   IN VARCHAR2
    ) RETURN NUMBER IS
        V_PMTAMT        NUMBER := 0;
        V_START         PLS_INTEGER := 1;
        V_LEN           PLS_INTEGER := LENGTH(P_CALC_AMOUNT); 
        V_COLON_IDX     PLS_INTEGER;
        V_HASH_IDX      PLS_INTEGER;
        V_POS           VARCHAR2(6);
        V_CALC_AMOUNT   NUMBER;
    BEGIN
        IF P_CALC_AMOUNT IS NULL THEN
            RETURN 0;
        END IF;

        V_COLON_IDX := INSTR(P_CALC_AMOUNT, ':', V_START) + 1;
        V_HASH_IDX := INSTR(P_CALC_AMOUNT, '#', V_COLON_IDX);
        IF V_HASH_IDX = 0 THEN
            V_HASH_IDX := V_LEN + 1;
        END IF;

        V_POS := SUBSTR(P_CALC_AMOUNT, 1, V_COLON_IDX - 1);
        V_PMTAMT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CALC_AMOUNT, V_POS);

        RETURN V_PMTAMT;
    END CALC_PMTAMT_VAL_FUNC;

    FUNCTION CALC_TYPE_VAL_FUNC(
        P_PRODUCT_STATUS IN VARCHAR2,
        P_PRODUCT        IN VARCHAR2
    ) RETURN VARCHAR2 IS
        V_TYPE             VARCHAR2(30);
        V_START            PLS_INTEGER := 1;
        V_LEN              PLS_INTEGER := LENGTH(P_PRODUCT_STATUS);
        V_COLON_IDX        PLS_INTEGER;
        V_HASH_IDX         PLS_INTEGER;
        V_POS            VARCHAR2(6);
        V_PRODUCT_STATUS  VARCHAR2(255);
    BEGIN
        IF P_PRODUCT_STATUS IS NULL THEN
            RETURN 0;
        END IF;

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_PRODUCT_STATUS, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_PRODUCT_STATUS, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_PRODUCT_STATUS, V_START, V_COLON_IDX - V_START);
            V_PRODUCT_STATUS := SUBSTR(P_PRODUCT_STATUS, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_PRODUCT_STATUS IN ('CURRENT')
             THEN
                V_TYPE :=  T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PRODUCT, V_POS);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_TYPE;
    END CALC_TYPE_VAL_FUNC;

    FUNCTION CALC_FREQ_VAL_FUNC(
        P_BILL_TYPE    IN VARCHAR2,
        P_PROPERTY IN VARCHAR2,
        P_PAYMENT_FREQ IN VARCHAR2
    ) RETURN NUMBER IS
        V_PAYMENT_FREQ VARCHAR2(255);
        V_START        PLS_INTEGER := 1;
        V_LEN          PLS_INTEGER := LENGTH(P_BILL_TYPE);
        V_COLON_IDX    PLS_INTEGER;
        V_HASH_IDX     PLS_INTEGER;
        V_POS          VARCHAR2(4);
        V_BILL_TYPE    VARCHAR2(20);
        V_PROPERTY     VARCHAR2(20);
        V_GROUP_1      VARCHAR2(20);
        V_GROUP_2      VARCHAR2(20);
        V_GROUP_3      VARCHAR2(20);
        V_GROUP_4      VARCHAR2(20);
        V_GROUP_5      VARCHAR2(20);
        D_GROUP_1      NUMBER;
        D_GROUP_2      NUMBER;
        D_GROUP_3      NUMBER;
        D_GROUP_4      NUMBER;
        D_GROUP_5      NUMBER;
        V_FREQ_RESULT  NUMBER;
       	V_FREQ_CURRENT NUMBER;
    BEGIN
        IF P_BILL_TYPE IS NULL THEN
            RETURN 0;
        END IF;

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_BILL_TYPE, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_BILL_TYPE, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS        := SUBSTR(P_BILL_TYPE, V_START, V_COLON_IDX - V_START);
            V_BILL_TYPE    := SUBSTR(P_BILL_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_PROPERTY     := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PROPERTY, V_POS);

            IF V_BILL_TYPE IN ('INSTALLMENT','INVESTORBILL','PAYMENT')
            AND V_PROPERTY = 'ACCOUNT'
            THEN
                V_PAYMENT_FREQ := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PAYMENT_FREQ, V_POS);
               
               	IF V_PAYMENT_FREQ IS NOT NULL THEN

	                V_GROUP_1 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,1);
	                V_GROUP_2 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,2);
	                V_GROUP_3 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,3);
	                V_GROUP_4 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,4);
	                V_GROUP_5 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,5);
	
	                D_GROUP_1 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_1,'\d+'));
	                D_GROUP_2 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_2,'\d+'));
	                D_GROUP_3 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_3,'\d+'));
	                D_GROUP_4 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_4,'\d+'));
	                D_GROUP_5 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_5,'\d+'));
	
	                V_FREQ_CURRENT:=
	                    CASE
	                        WHEN V_GROUP_5 = 'eLHFYRF' THEN 6
	                        WHEN V_GROUP_5 = 'eLMNTHF' THEN 1
	                        WHEN V_GROUP_5 = 'eLQUATF' THEN 3
	                        WHEN V_GROUP_5 = 'eLWEEKF' THEN 1
	                        WHEN V_GROUP_5 = 'eLYEARF' THEN 1
	                        WHEN SUBSTR(V_GROUP_4,1,1) = 'o' AND NVL(D_GROUP_2,0) <> 0 THEN D_GROUP_2
	                        WHEN SUBSTR(V_GROUP_4,1,1) = 'o' AND NVL(D_GROUP_3,0) <> 0 THEN D_GROUP_3
	                        WHEN NVL(D_GROUP_1,0) <> 0 THEN D_GROUP_1
	                        WHEN NVL(D_GROUP_2,0) <> 0 THEN D_GROUP_2
	                        WHEN NVL(D_GROUP_3,0) <> 0 THEN D_GROUP_3
	                        WHEN SUBSTR(V_GROUP_4,2,1) = 'B' THEN 1
	                        WHEN NVL(D_GROUP_4,0) <> 0 THEN D_GROUP_4
	                    END;
	               	V_FREQ_RESULT := GREATEST(NVL(V_FREQ_RESULT,0), V_FREQ_CURRENT);
	            END IF;
	        END IF;
			
            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_FREQ_RESULT;
    END CALC_FREQ_VAL_FUNC;

    FUNCTION CALC_PURCOD_VAL_FUNC(
        P_ARR_ID IN VARCHAR2,
        P_TODAY IN VARCHAR2
    ) RETURN VARCHAR2 IS
        V_MAX_DATE VARCHAR2(8) := '00000000';
        V_RESULT   VARCHAR2(5);
    BEGIN
        FOR rec IN (
            SELECT SUBSTR(ID_COMP_3,1,8) as ID_COMP_3_DATE, MSB_LN_PURPOSE
            FROM FMSB_AAC_MAPPED
            WHERE ID_COMP_1 = P_ARR_ID
            AND SUBSTR(ID_COMP_3,1,8) <= P_TODAY
            ORDER BY SUBSTR(ID_COMP_3,1,8)
        ) LOOP
            IF rec.ID_COMP_3_DATE >= V_MAX_DATE THEN
                V_MAX_DATE := rec.ID_COMP_3_DATE;
                V_RESULT   := rec.MSB_LN_PURPOSE;              	
            END IF;
        END LOOP;

        RETURN V_RESULT;
    END CALC_PURCOD_VAL_FUNC;
   
   FUNCTION CALC_IPFREQ_VAL_FUNC(
        P_BILL_TYPE    IN VARCHAR2,
        P_PROPERTY     IN VARCHAR2,
        P_PAYMENT_FREQ IN VARCHAR2
    ) RETURN NUMBER IS
        V_PAYMENT_FREQ   VARCHAR2(255);
        V_START          PLS_INTEGER := 1;
        V_LEN            PLS_INTEGER := LENGTH(P_BILL_TYPE);
        V_COLON_IDX      PLS_INTEGER;
        V_HASH_IDX       PLS_INTEGER;
        V_POS            VARCHAR2(4);
        V_BILL_TYPE      VARCHAR2(255);
        V_PROPERTY       VARCHAR2(50);
        V_GROUP_1        VARCHAR2(15);
        V_GROUP_2        VARCHAR2(15);
        V_GROUP_3        VARCHAR2(15);
        V_GROUP_4        VARCHAR2(15);
        V_GROUP_5        VARCHAR2(15);
        D_GROUP_1        NUMBER;
        D_GROUP_2        NUMBER;
        D_GROUP_3        NUMBER;
        D_GROUP_4        NUMBER;
        D_GROUP_5        NUMBER;
        V_IPFREQ_RESULT  NUMBER;
        V_IPFREQ_CURRENT NUMBER;
    BEGIN
        IF P_BILL_TYPE IS NULL THEN
            RETURN 0;
        END IF;

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_BILL_TYPE, ':', V_START) + 1;
            V_HASH_IDX := INSTR(P_BILL_TYPE, '#', V_COLON_IDX);

            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS := SUBSTR(P_BILL_TYPE, V_START, V_COLON_IDX - V_START);
            V_BILL_TYPE := SUBSTR(P_BILL_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_PROPERTY      := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PROPERTY, V_POS);

            IF V_BILL_TYPE IN ('INSTALLMENT','INVESTORBILL','PAYMENT')
            AND V_PROPERTY IN ('LOANINTEREST','LNINTPREBUY','INVESTORINT','RISKINTEREST')
            THEN
                V_PAYMENT_FREQ := T24_UTILS_PKG.GET_STR_VAL_BY_POS_FUNC(P_PAYMENT_FREQ, V_POS);
               	
                IF V_PAYMENT_FREQ IS NOT NULL THEN
	
	                V_GROUP_1 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,1);
	                V_GROUP_2 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,2);
	                V_GROUP_3 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,3);
	                V_GROUP_4 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,4);
	                V_GROUP_5 := REGEXP_SUBSTR(V_PAYMENT_FREQ,'(\S+)',1,5);
	
	                D_GROUP_1 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_1,'\d+'));
	                D_GROUP_2 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_2,'\d+'));
	                D_GROUP_3 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_3,'\d+'));
	                D_GROUP_4 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_4,'\d+'));
	                D_GROUP_5 := TO_NUMBER(REGEXP_SUBSTR(V_GROUP_5,'\d+'));
	
	                V_IPFREQ_CURRENT :=
	                    CASE
	                        WHEN V_GROUP_5 = 'eLHFYRF' THEN 6
	                        WHEN V_GROUP_5 = 'eLMNTHF' THEN 1
	                        WHEN V_GROUP_5 = 'eLQUATF' THEN 3
	                        WHEN V_GROUP_5 = 'eLWEEKF' THEN 1
	                        WHEN V_GROUP_5 = 'eLYEARF' THEN 1
	                        WHEN SUBSTR(V_GROUP_4,1,1) = 'o' AND NVL(D_GROUP_2,0) <> 0 THEN D_GROUP_2
	                        WHEN SUBSTR(V_GROUP_4,1,1) = 'o' AND NVL(D_GROUP_3,0) <> 0 THEN D_GROUP_3
	                        WHEN NVL(D_GROUP_1,0) <> 0 THEN D_GROUP_1
	                        WHEN NVL(D_GROUP_2,0) <> 0 THEN D_GROUP_2
	                        WHEN NVL(D_GROUP_3,0) <> 0 THEN D_GROUP_3
	                        WHEN SUBSTR(V_GROUP_4,2,1) = 'B' THEN 1
	                        WHEN NVL(D_GROUP_4,0) <> 0 THEN D_GROUP_4
	                    END;
	                V_IPFREQ_RESULT := GREATEST(NVL(V_IPFREQ_RESULT,0), V_IPFREQ_CURRENT);
				END IF;        	 
           END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN V_IPFREQ_RESULT;
    END CALC_IPFREQ_VAL_FUNC;

    PROCEDURE GEN_FROM_ACC_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNTNEW_ACTIVITY_ACC CDC
        WHERE EXISTS (
            SELECT 1 FROM FMSB_ACC_MAPPED ACC
            WHERE ACC.RECID = CDC.RECID AND CDC.WINDOW_ID <= ACC.WINDOW_ID
        )
        AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;
    
        SELECT TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT INTO T24_LNTNEW_ACTIVITY (
            BRN, ACCTNO, LNNUM, CIFNO, ACNAME, STATUS, TYPE,
            CURTYP, ORGAMT, DRLIMT, HOLD, CBAL, OTHCHG,
            ACCINT, COMACC, PMTAMT, FNLPMT, BILPRN, BILINT,
            BILESC, BILLC, BILOC, BILMC, BILLCO, YSOBAL,
            DATOPN, FRELDT, FULLDT, MATDT, RATE, LCTYPE,
            ACCMLC, TERM, TMCODE, FREQ, IPFREQ, ODIND, PURCOD,
            WINDOW_ID,COMMIT_TS,REPLICAT_TS,MAPPED_TS,CALL_CDC
        )
        SELECT
            ACC.CO_CODE, --BRN
            TO_NUMBER(ACC.RECID), --ACCTNO
            0, --LNNUM
            TO_NUMBER(ACC.CUSTOMER), --CIFNO
            TRIM(ACC.ACNAME), --ACNAME
            CASE
                WHEN ARR.ARR_STATUS IN ('CLOSE', 'PENDING.CLOSURE', 'CANCELLED') THEN 2
                ELSE 4
            END, --STATUS
            CALC_TYPE_VAL_FUNC(ARR.PRODUCT_STATUS, ARR.PRODUCT), --TYPE
            ACC.CURRENCY, --CURTYP
            ( 
                SELECT TO_NUMBER(ATA.ORGAMT) 
--                FROM MV_FMSB_ATA_LNTNEW ATA
				FROM VW_FMSB_ATA_LNTNEW ATA
                WHERE ATA.ID_COMP_1 = ARR.RECID
            ), --ORGAMT
            TO_NUMBER(LMT.INTERNAL_AMOUNT), --DRLIMT
            0, --HOLD
            0, --CBAL
            0, --OTHCHG
            0, --ACCINT
            0, --COMACC
            (
                SELECT T24_LNTNEW_ACTIVITY_PKG.CALC_PMTAMT_VAL_FUNC(ASCC.CALC_AMOUNT)
                FROM FMSB_ASC_MAPPED ASCC
                WHERE ASCC.ID_COMP_1 = ARR.RECID
                AND ASCC.ID_COMP_3 = (
                    SELECT MV.MAX_ID_COMP_3
--                    FROM MV_FMSB_ASC_LNTNEW MV
					FROM VW_FMSB_ASC_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ASCC.ID_COMP_1
                )                
            ), --PMTAMT
            '', --FNLPMT
            0, --BILPRN
            0, --BILINT
            0, --BILESC
            0, --BILLC
            0, --BILOC
            0, --BILMC
            0, --BILLCO
            0, --YSOBAL
            TO_NUMBER(TO_CHAR(NVL(ARR.ORIG_CONTRACT_DATE, ACC.OPENING_DATE), 'YYYYDDD')), --DATOPN 
            (
                SELECT TO_NUMBER(TO_CHAR(MIN_EFF_DAT, 'YYYYDDD'))
--                FROM MV_FMSB_ARC_LNTNEW
				FROM VW_FMSB_ARC_LNTNEW
                WHERE ARRANGEMENT = ARR.RECID
                AND MIN_EFF_DAT <= TO_DATE(V_TODAY, 'YYYYMMDD')
            ), --FRELDT
            (
            	SELECT TO_NUMBER(TO_CHAR(MAX(EFFECTIVE_DATE), 'YYYYDDD'))
				FROM FMSB_ARC_LNTNEW
				WHERE ARRANGEMENT = ARR.RECID
				AND EFFECTIVE_DATE <= TO_DATE(V_TODAY,'YYYYMMDD')
                GROUP BY ARRANGEMENT
            ), --FULDT
            (
                SELECT TO_NUMBER(TO_CHAR(NVL(ATA.MSB_OR_LNMAT_DT, ATA.MATURITY_DATE), 'YYYYDDD'))
                FROM FMSB_ATA_MAPPED ATA
                WHERE ID_COMP_1 = ARR.RECID
                AND ATA.ID_COMP_3 = (
                    SELECT MV.MIN_ID_COMP_3
--                    FROM MV_FMSB_ATA_LNTNEW MV
					FROM VW_FMSB_ATA_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ATA.ID_COMP_1                    
                )
            ), --MATDT
            (
				SELECT RATE 
				FROM(
					SELECT TO_NUMBER(AIT.EFFECTIVE_RATE) / 100 AS RATE,
					ROW_NUMBER() OVER (
						PARTITION BY AIT.ID_COMP_1 
						ORDER BY AIT.ID_COMP_3 DESC, 
							(CASE WHEN AIT.ID_COMP_2 = 'LOANINTEREST' THEN to_number(AIT.ID_COMP_3) else to_number(AIT.ID_COMP_3) - 1  end) DESC) AS row_num
						FROM FMSB_AIT_LNTNEW AIT
						where AIT.ID_COMP_1 = ARR.RECID
						-- and AIT.ID_COMP_2 in ('DEPOSITINT', 'LOANINTEREST','LNINTPREBUY','INVESTORINT','RISKINTEREST')
						and TO_DATE(REGEXP_SUBSTR(AIT.ID_COMP_3, '[^.]+', 1, 1), 'YYYYMMDD') <= TO_DATE(V_TODAY,'YYYYMMDD')
				)WHERE row_num = 1          	
            ), --RATE
            '', --LCTYPE
            '',--ACCMLC
            (
                SELECT REGEXP_SUBSTR(ATA.TERM, '\d+',1)
                FROM FMSB_ATA_MAPPED ATA
                WHERE ATA.ID_COMP_1 = ARR.RECID
                AND ATA.ID_COMP_3 = (
                    SELECT MV.MIN_ID_COMP_3
--                    FROM MV_FMSB_ATA_LNTNEW MV
					FROM VW_FMSB_ATA_LNTNEW MV 
                    WHERE MV.ID_COMP_1 = ATA.ID_COMP_1                    
                )
            ), --TERM
            (
                SELECT REGEXP_SUBSTR(ATA.TERM, '\D+',1)
                FROM FMSB_ATA_MAPPED ATA
                WHERE ATA.ID_COMP_1 = ARR.RECID
                AND ATA.ID_COMP_3 = (
                    SELECT MV.MIN_ID_COMP_3
--                    FROM MV_FMSB_ATA_LNTNEW MV
					FROM VW_FMSB_ATA_LNTNEW MV 
                    WHERE MV.ID_COMP_1 = ATA.ID_COMP_1                    
                )
            ), --TMCODE
            (
                SELECT T24_LNTNEW_ACTIVITY_PKG.CALC_FREQ_VAL_FUNC(ASCC.BILL_TYPE, ASCC.PROPERTY, ASCC.PAYMENT_FREQ)
                FROM FMSB_ASC_MAPPED ASCC
                WHERE ASCC.ID_COMP_1 = ARR.RECID
                AND ASCC.ID_COMP_3 = (
                    SELECT MV.MAX_ID_COMP_3
--                    FROM MV_FMSB_ASC_LNTNEW MV
					FROM VW_FMSB_ASC_LNTNEW MV 
                    WHERE MV.ID_COMP_1 = ASCC.ID_COMP_1
                )
            ), --FREQ
            (
                SELECT T24_LNTNEW_ACTIVITY_PKG.CALC_IPFREQ_VAL_FUNC(ASCC.BILL_TYPE, ASCC.PROPERTY, ASCC.PAYMENT_FREQ)
                FROM FMSB_ASC_MAPPED ASCC
                WHERE ASCC.ID_COMP_1 = ARR.RECID
                AND ASCC.ID_COMP_3 = (
                    SELECT MV.MAX_ID_COMP_3
--                    FROM MV_FMSB_ASC_LNTNEW MV
					FROM VW_FMSB_ASC_LNTNEW MV 
                    WHERE MV.ID_COMP_1 = ASCC.ID_COMP_1
                )            
            ), --IPFREQ
            'A', --ODIND
            CALC_PURCOD_VAL_FUNC(ARR.RECID, V_TODAY), --PURCOD
            ACC.WINDOW_ID,
            ACC.COMMIT_TS,
            ACC.REPLICAT_TS,
            ACC.MAPPED_TS,
            'ACC'
        FROM TABLE(V_WINDOW_ID_LIST) V
	        JOIN FMSB_ACC_MAPPED ACC ON ACC.WINDOW_ID = V.COLUMN_VALUE
	        JOIN FMSB_ARR_LNTNEW ARR ON ARR.LINKED_APPL_ID = ACC.RECID
	        LEFT JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID = ACC.LIMIT_KEY
        WHERE ARR.START_DATE >= V_TODAY;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ACC_PROC;

    PROCEDURE GEN_FROM_ARR_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNTNEW_ACTIVITY_ARR CDC
        WHERE EXISTS (
            SELECT 1 FROM FMSB_ARR_LNTNEW ARR
            WHERE ARR.RECID = CDC.RECID AND CDC.WINDOW_ID <= ARR.WINDOW_ID
        )
        AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;
    
        SELECT TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT INTO T24_LNTNEW_ACTIVITY (
            BRN, ACCTNO, LNNUM, CIFNO, ACNAME, STATUS, TYPE,
            CURTYP, ORGAMT, DRLIMT, HOLD, CBAL, OTHCHG,
            ACCINT, COMACC, PMTAMT, FNLPMT, BILPRN, BILINT,
            BILESC, BILLC, BILOC, BILMC, BILLCO, YSOBAL,
            DATOPN, FRELDT, FULLDT, MATDT, RATE, LCTYPE,
            ACCMLC, TERM, TMCODE, FREQ, IPFREQ, ODIND, PURCOD,
            WINDOW_ID,COMMIT_TS,REPLICAT_TS,MAPPED_TS,CALL_CDC
        )
        SELECT
            ACC.CO_CODE, --BRN
            TO_NUMBER(ARR.LINKED_APPL_ID), --ACCTNO
            0, --LNNUM
            TO_NUMBER(ACC.CUSTOMER), --CIFNO
            TRIM(ACC.ACNAME), --ACNAME
            CASE
                WHEN ARR.ARR_STATUS IN ('CLOSE', 'PENDING.CLOSURE', 'CANCELLED') THEN 2
                ELSE 4
            END, --STATUS
            CALC_TYPE_VAL_FUNC(ARR.PRODUCT_STATUS, ARR.PRODUCT), --TYPE
            ACC.CURRENCY, --CURTYP
            (
                SELECT TO_NUMBER(ATA.ORGAMT) 
--                FROM MV_FMSB_ATA_LNTNEW ATA
				FROM VW_FMSB_ATA_LNTNEW ATA
                WHERE ATA.ID_COMP_1 = ARR.RECID
            ), --ORIGINAL
           TO_NUMBER(LMT.INTERNAL_AMOUNT), --DRLIMT
            0, --HOLD
            0, --CBAL
            0, --OTHCHG
            0, --ACCINT
            0, --COMACC
            (
                SELECT T24_LNTNEW_ACTIVITY_PKG.CALC_PMTAMT_VAL_FUNC(ASCC.CALC_AMOUNT)
                FROM FMSB_ASC_MAPPED ASCC
                WHERE ASCC.ID_COMP_1 = ARR.RECID
                AND ASCC.ID_COMP_3 = (
                    SELECT MV.MAX_ID_COMP_3
--                    FROM MV_FMSB_ASC_LNTNEW MV
					FROM VW_FMSB_ASC_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ASCC.ID_COMP_1
                )                
            ), --PMTAMT
            '', --FNLPMT
            0, --BILPRN
            0, --BILINT
            0, --BILESC
            0, --BILLC
            0, --BILOC
            0, --BILMC
            0, --BILLCO
            0, --YSOBAL
            TO_NUMBER(TO_CHAR(NVL(ARR.ORIG_CONTRACT_DATE, ACC.OPENING_DATE), 'YYYYDDD')), --DATOPN 
            (
                SELECT TO_NUMBER(TO_CHAR(MIN_EFF_DAT, 'YYYYDDD'))
--                FROM MV_FMSB_ARC_LNTNEW
				FROM VW_FMSB_ARC_LNTNEW
                WHERE ARRANGEMENT = ARR.RECID
                AND MIN_EFF_DAT <= TO_DATE(V_TODAY, 'YYYYMMDD')
            ), --FRELDT
            (
            	SELECT TO_NUMBER(TO_CHAR(MAX(EFFECTIVE_DATE), 'YYYYDDD'))
				FROM FMSB_ARC_LNTNEW
				WHERE ARRANGEMENT = ARR.RECID
				AND EFFECTIVE_DATE <= TO_DATE(V_TODAY,'YYYYMMDD')
                GROUP BY ARRANGEMENT
            ), --FULDT
            (
                SELECT TO_NUMBER(TO_CHAR(NVL(ATA.MSB_OR_LNMAT_DT, ATA.MATURITY_DATE), 'YYYYDDD'))
                FROM FMSB_ATA_MAPPED ATA
                WHERE ID_COMP_1 = ARR.RECID
                AND ATA.ID_COMP_3 = (
                    SELECT MV.MIN_ID_COMP_3
--                    FROM MV_FMSB_ATA_LNTNEW MV
					FROM VW_FMSB_ATA_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ATA.ID_COMP_1                    
                )
            ), --MATDT
            (
				SELECT RATE 
				FROM(
					SELECT TO_NUMBER(AIT.EFFECTIVE_RATE) / 100 AS RATE,
					ROW_NUMBER() OVER (
						PARTITION BY AIT.ID_COMP_1 
						ORDER BY AIT.ID_COMP_3 DESC, 
							(CASE WHEN AIT.ID_COMP_2 = 'LOANINTEREST' THEN to_number(AIT.ID_COMP_3) else to_number(AIT.ID_COMP_3) - 1  end) DESC) AS row_num
						FROM FMSB_AIT_LNTNEW AIT
						where AIT.ID_COMP_1 = ARR.RECID
						-- and AIT.ID_COMP_2 in ('DEPOSITINT', 'LOANINTEREST','LNINTPREBUY','INVESTORINT','RISKINTEREST')
						and TO_DATE(REGEXP_SUBSTR(AIT.ID_COMP_3, '[^.]+', 1, 1), 'YYYYMMDD') <= TO_DATE(V_TODAY,'YYYYMMDD')
				)WHERE row_num = 1          	
            ), --RATE     
            '', --LCTYPE
            '',--ACCMLC
            (
                SELECT REGEXP_SUBSTR(ATA.TERM, '\d+',1)
                FROM FMSB_ATA_MAPPED ATA
                WHERE ATA.ID_COMP_1 = ARR.RECID
                AND ATA.ID_COMP_3 = (
                    SELECT MV.MIN_ID_COMP_3
--                    FROM MV_FMSB_ATA_LNTNEW MV
					FROM VW_FMSB_ATA_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ATA.ID_COMP_1                    
                )
            ) AS TERM, --TERM
            (
                SELECT REGEXP_SUBSTR(ATA.TERM, '\D+',1)
                FROM FMSB_ATA_MAPPED ATA
                WHERE ATA.ID_COMP_1 = ARR.RECID
                AND ATA.ID_COMP_3 = (
                    SELECT MV.MIN_ID_COMP_3
--                    FROM MV_FMSB_ATA_LNTNEW MV
					FROM VW_FMSB_ATA_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ATA.ID_COMP_1                    
                )
            ) AS TMCODE, --TMCODE
            (
                SELECT T24_LNTNEW_ACTIVITY_PKG.CALC_FREQ_VAL_FUNC(ASCC.BILL_TYPE, ASCC.PROPERTY, ASCC.PAYMENT_FREQ)
                FROM FMSB_ASC_MAPPED ASCC
                WHERE ASCC.ID_COMP_1 = ARR.RECID
                AND ASCC.ID_COMP_3 = (
                    SELECT MV.MAX_ID_COMP_3
--                    FROM MV_FMSB_ASC_LNTNEW MV
					FROM VW_FMSB_ASC_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ASCC.ID_COMP_1
                )
            ) AS FREQ, --FREQ
            (
                SELECT T24_LNTNEW_ACTIVITY_PKG.CALC_IPFREQ_VAL_FUNC(ASCC.BILL_TYPE, ASCC.PROPERTY, ASCC.PAYMENT_FREQ)
                FROM FMSB_ASC_MAPPED ASCC
                WHERE ASCC.ID_COMP_1 = ARR.RECID
                AND ASCC.ID_COMP_3 = (
                    SELECT MV.MAX_ID_COMP_3
--                    FROM MV_FMSB_ASC_LNTNEW MV
					FROM VW_FMSB_ASC_LNTNEW MV
                    WHERE MV.ID_COMP_1 = ASCC.ID_COMP_1
                )           
            ), --IPFREQ
            'A', --ODIND
            CALC_PURCOD_VAL_FUNC(ARR.RECID, V_TODAY), --PURCOD
            ARR.WINDOW_ID,
            ARR.COMMIT_TS,
            ARR.REPLICAT_TS,
            ARR.MAPPED_TS,
            'ARR'
        FROM TABLE(V_WINDOW_ID_LIST) V
	        JOIN FMSB_ARR_LNTNEW ARR ON ARR.WINDOW_ID = V.COLUMN_VALUE
	        JOIN FMSB_ACC_MAPPED ACC ON ARR.LINKED_APPL_ID = ACC.RECID
	        LEFT JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID = ACC.LIMIT_KEY
        WHERE ARR.START_DATE >= V_TODAY;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ARR_PROC;
    
END T24_LNTNEW_ACTIVITY_PKG;

CREATE OR REPLACE PACKAGE T24RAW.T24_LNMEMO_ACTIVITY_PKG IS

    FUNCTION CALC_CBAL_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_HOLD_VAL_FUNC(
        P_FROM_DATE     IN VARCHAR2,
        P_TODAY         IN VARCHAR2,
        P_LOCKED_AMOUNT IN VARCHAR2
    ) RETURN NUMBER;

    FUNCTION CALC_ACCINT_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER;

    PROCEDURE GEN_FROM_ACC_PROC;
    PROCEDURE GEN_FROM_ARR_PROC;
    PROCEDURE GEN_FROM_BIL_PROC;
    PROCEDURE GEN_FROM_ECB_PROC;

END T24_LNMEMO_ACTIVITY_PKG;

CREATE OR REPLACE PACKAGE BODY T24RAW.T24_LNMEMO_ACTIVITY_PKG IS

    ---------------------------------------------------------------------------
    -- CALC_CBAL_VAL_FUNC
    ---------------------------------------------------------------------------
    FUNCTION CALC_CBAL_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER IS
        V_START           PLS_INTEGER := 1;
        V_LEN             PLS_INTEGER := LENGTH(P_CURR_ASSET_TYPE);
        V_COLON_IDX       PLS_INTEGER;
        V_HASH_IDX        PLS_INTEGER;
        V_POS             VARCHAR2(6);
        V_CURR_ASSET_TYPE VARCHAR2(255);
        V_CBAL            NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_CURR_ASSET_TYPE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_CURR_ASSET_TYPE, '#', V_COLON_IDX);
            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS             := SUBSTR(P_CURR_ASSET_TYPE, V_START, V_COLON_IDX - V_START);
            V_CURR_ASSET_TYPE := SUBSTR(P_CURR_ASSET_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_CURR_ASSET_TYPE IN (
                'CURACCOUNT', 'DUEACCOUNT', 'DELACCOUNT',
                'CURACCOUNTINF', 'DUEACCOUNTINF', 'DELACCOUNTINF'
            ) THEN
                V_CBAL := V_CBAL
                       + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OPEN_BALANCE, V_POS)
                       + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CREDIT_MVMT,  V_POS)
                       + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_DEBIT_MVMT,   V_POS);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN ABS(V_CBAL);
    END CALC_CBAL_VAL_FUNC;

    ---------------------------------------------------------------------------
    -- CALC_HOLD_VAL_FUNC
    ---------------------------------------------------------------------------
    FUNCTION CALC_HOLD_VAL_FUNC(
        P_FROM_DATE     IN VARCHAR2,
        P_TODAY         IN VARCHAR2,
        P_LOCKED_AMOUNT IN VARCHAR2
    ) RETURN NUMBER IS
        V_HOLD          NUMBER;
        V_PAST          NUMBER;
        V_START         PLS_INTEGER := 1;
        V_LEN           PLS_INTEGER := LENGTH(P_FROM_DATE);
        V_COLON_IDX     PLS_INTEGER;
        V_HASH_IDX      PLS_INTEGER;
        V_POS           VARCHAR2(6);
        V_FROM_DATE     VARCHAR2(8);
        V_LOCKED_AMOUNT NUMBER;
    BEGIN
        IF P_LOCKED_AMOUNT IS NULL THEN
            RETURN 0;
        END IF;

        V_HOLD := TO_NUMBER(T24_UTILS_PKG.GET_LAST_VAL_FUNC(P_LOCKED_AMOUNT));

        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_FROM_DATE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_FROM_DATE, '#', V_COLON_IDX);
            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS           := SUBSTR(P_FROM_DATE, V_START, V_COLON_IDX - V_START);
            V_FROM_DATE     := SUBSTR(P_FROM_DATE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);
            V_LOCKED_AMOUNT := T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_LOCKED_AMOUNT, V_POS);

            IF V_FROM_DATE > P_TODAY THEN
                V_HOLD := GREATEST(V_HOLD, V_LOCKED_AMOUNT);
            ELSE
                V_PAST := V_LOCKED_AMOUNT;
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN GREATEST(V_HOLD, NVL(V_PAST, V_HOLD));
    END CALC_HOLD_VAL_FUNC;

    ---------------------------------------------------------------------------
    -- CALC_ACCINT_VAL_FUNC
    ---------------------------------------------------------------------------
    FUNCTION CALC_ACCINT_VAL_FUNC(
        P_CURR_ASSET_TYPE IN VARCHAR2,
        P_OPEN_BALANCE    IN VARCHAR2,
        P_CREDIT_MVMT     IN VARCHAR2,
        P_DEBIT_MVMT      IN VARCHAR2
    ) RETURN NUMBER IS
        V_START           PLS_INTEGER := 1;
        V_LEN             PLS_INTEGER := LENGTH(P_CURR_ASSET_TYPE);
        V_COLON_IDX       PLS_INTEGER;
        V_HASH_IDX        PLS_INTEGER;
        V_POS             VARCHAR2(6);
        V_CURR_ASSET_TYPE VARCHAR2(255);
        V_ACCINT          NUMBER := 0;
    BEGIN
        WHILE V_START <= V_LEN LOOP
            V_COLON_IDX := INSTR(P_CURR_ASSET_TYPE, ':', V_START) + 1;
            V_HASH_IDX  := INSTR(P_CURR_ASSET_TYPE, '#', V_COLON_IDX);
            IF V_HASH_IDX = 0 THEN
                V_HASH_IDX := V_LEN + 1;
            END IF;

            V_POS             := SUBSTR(P_CURR_ASSET_TYPE, V_START, V_COLON_IDX - V_START);
            V_CURR_ASSET_TYPE := SUBSTR(P_CURR_ASSET_TYPE, V_COLON_IDX, V_HASH_IDX - V_COLON_IDX);

            IF V_CURR_ASSET_TYPE IN (
                'ACCLOANINTEREST',  'ACCLNINTPREBUY',  'ACCINVESTORINT',  'ACCRISKINTEREST',  'ACCLOANINTERESTINF',
                'DUELOANINTEREST',  'DUELNINTPREBUY',  'DUEINVESTORINT',  'DUERISKINTEREST',  'DUELOANINTERESTINF',
                'DELLOANINTEREST',  'DELLNINTPREBUY',  'DELINVESTORINT',  'DELRISKINTEREST',  'DELLOANINTERESTINF'
            ) THEN
                V_ACCINT := V_ACCINT
                         + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_OPEN_BALANCE, V_POS)
                         + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_CREDIT_MVMT,  V_POS)
                         + T24_UTILS_PKG.GET_NUM_VAL_BY_POS_FUNC(P_DEBIT_MVMT,   V_POS);
            END IF;

            V_START := V_HASH_IDX;
        END LOOP;

        RETURN ABS(V_ACCINT);
    END CALC_ACCINT_VAL_FUNC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_ACC_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_ACC_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_ACC CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_ACC_MAPPED ACC
            WHERE ACC.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= ACC.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ACC.RECID            AS ACCTNO,
                ARR.RECID            AS ARR_RECID,
                ACC.CURRENCY         AS CURTYP,
                ECB.CURR_ASSET_TYPE  AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE     AS OPEN_BALANCE,
                ECB.CREDIT_MVMT      AS CREDIT_MVMT,
                ECB.DEBIT_MVMT       AS DEBIT_MVMT,
                ACC.FROM_DATE        AS FROM_DATE,
                ACC.LOCKED_AMOUNT    AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT  AS DRLIMT,
                ACC.WINDOW_ID        AS WINDOW_ID,
                ACC.COMMIT_TS        AS COMMIT_TS,
                ACC.REPLICAT_TS      AS REPLICAT_TS,
                ACC.MAPPED_TS        AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.WINDOW_ID      = V.COLUMN_VALUE
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID          = ACC.RECID
            LEFT  JOIN FMSB_ARR_LNMEMO ARR ON ARR.LINKED_APPL_ID = ACC.RECID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID          = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT 
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'ACC' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ACC_PROC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_ARR_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_ARR_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_ARR CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_ARR_LNMEMO ARR
            WHERE ARR.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= ARR.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ARR.LINKED_APPL_ID  AS ACCTNO,
                ARR.RECID           AS ARR_RECID,
                ACC.CURRENCY        AS CURTYP,
                ECB.CURR_ASSET_TYPE AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE    AS OPEN_BALANCE,
                ECB.CREDIT_MVMT     AS CREDIT_MVMT,
                ECB.DEBIT_MVMT      AS DEBIT_MVMT,
                ACC.FROM_DATE       AS FROM_DATE,
                ACC.LOCKED_AMOUNT   AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT AS DRLIMT,
                ARR.WINDOW_ID       AS WINDOW_ID,
                ARR.COMMIT_TS       AS COMMIT_TS,
                ARR.REPLICAT_TS     AS REPLICAT_TS,
                ARR.MAPPED_TS       AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_ARR_LNMEMO ARR ON ARR.WINDOW_ID = V.COLUMN_VALUE
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID     = ARR.LINKED_APPL_ID
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID     = ARR.LINKED_APPL_ID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID     = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT 
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'ARR' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ARR_PROC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_BIL_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_BIL_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_BIL CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_BIL_LNMEMO BIL
            WHERE BIL.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= BIL.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ARR.LINKED_APPL_ID  AS ACCTNO,
                ARR.RECID           AS ARR_RECID,
                ACC.CURRENCY        AS CURTYP,
                ECB.CURR_ASSET_TYPE AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE    AS OPEN_BALANCE,
                ECB.CREDIT_MVMT     AS CREDIT_MVMT,
                ECB.DEBIT_MVMT      AS DEBIT_MVMT,
                ACC.FROM_DATE       AS FROM_DATE,
                ACC.LOCKED_AMOUNT   AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT AS DRLIMT,
                BIL.WINDOW_ID       AS WINDOW_ID,
                BIL.COMMIT_TS       AS COMMIT_TS,
                BIL.REPLICAT_TS     AS REPLICAT_TS,
                BIL.MAPPED_TS       AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_BIL_LNMEMO BIL ON BIL.WINDOW_ID = V.COLUMN_VALUE
            LEFT  JOIN FMSB_ARR_LNMEMO ARR ON ARR.RECID     = BIL.ARRANGEMENT_ID
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID     = ARR.LINKED_APPL_ID
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.RECID     = ACC.RECID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID     = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'BIL' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_BIL_PROC;

    ---------------------------------------------------------------------------
    -- GEN_FROM_ECB_PROC
    ---------------------------------------------------------------------------
    PROCEDURE GEN_FROM_ECB_PROC IS
        V_WINDOW_ID_LIST T_WINDOW_ID_ARRAY;
        V_TODAY          VARCHAR2(8);
    BEGIN
        DELETE FROM T24_LNMEMO_ACTIVITY_ECB CDC
        WHERE EXISTS (
            SELECT 1
            FROM FMSB_ECB_MAPPED ECB
            WHERE ECB.RECID = CDC.RECID
            AND CDC.WINDOW_ID <= ECB.WINDOW_ID
        )
        -- AND ROWNUM <= 5000
        RETURNING CDC.WINDOW_ID BULK COLLECT INTO V_WINDOW_ID_LIST;

        SELECT /*+ RESULT_CACHE */ TODAY INTO V_TODAY
        FROM F_DAT_MAPPED
        WHERE RECID = 'VN0011000';

        INSERT /*+ APPEND */ INTO T24_LNMEMO_ACTIVITY (
            ACCTNO,
            CURTYP,
            CBAL,
            HOLD,
            DRLIMT,
            ACCINT,
            COMACC,
            OTHCHG,
            BILPRN,
            BILINT,
            BILESC,
            BILLC,
            BILOC,
            BILMC,
            WINDOW_ID,
            COMMIT_TS,
            REPLICAT_TS,
            MAPPED_TS,
            CALL_CDC
        )
        WITH PRECOMPUTED AS (
            SELECT /*+ MATERIALIZE */
                ECB.RECID            AS ACCTNO,
                ARR.RECID            AS ARR_RECID,
                ACC.CURRENCY         AS CURTYP,
                ECB.CURR_ASSET_TYPE  AS CURR_ASSET_TYPE,
                ECB.OPEN_BALANCE     AS OPEN_BALANCE,
                ECB.CREDIT_MVMT      AS CREDIT_MVMT,
                ECB.DEBIT_MVMT       AS DEBIT_MVMT,
                ACC.FROM_DATE        AS FROM_DATE,
                ACC.LOCKED_AMOUNT    AS LOCKED_AMOUNT,
                LMT.INTERNAL_AMOUNT  AS DRLIMT,
                ECB.WINDOW_ID        AS WINDOW_ID,
                ECB.COMMIT_TS        AS COMMIT_TS,
                ECB.REPLICAT_TS      AS REPLICAT_TS,
                ECB.MAPPED_TS        AS MAPPED_TS
            FROM TABLE(V_WINDOW_ID_LIST) V
            INNER JOIN FMSB_ECB_MAPPED ECB ON ECB.WINDOW_ID      = V.COLUMN_VALUE
            INNER JOIN FMSB_ACC_MAPPED ACC ON ACC.RECID          = ECB.RECID
            LEFT  JOIN FMSB_ARR_LNMEMO ARR ON ARR.LINKED_APPL_ID = ECB.RECID
            LEFT  JOIN FMSB_LMT_MAPPED LMT ON LMT.RECID          = ACC.LIMIT_KEY
        ),
        AGGREGATED AS (
            SELECT
                BIL.ARRANGEMENT_ID,
                SUM(BILPRN_AMT) AS BILPRN,
                SUM(BILINT_AMT) AS BILINT,
                SUM(BILLC_AMT)  AS BILLC
            FROM FMSB_BIL_LNMEMO BIL
            WHERE EXISTS (
                SELECT 1
                FROM PRECOMPUTED PRE
                WHERE PRE.ARR_RECID = BIL.ARRANGEMENT_ID
            )
            GROUP BY BIL.ARRANGEMENT_ID
        )
        SELECT
            TO_NUMBER(PRE.ACCTNO), -- ACCTNO
            PRE.CURTYP, -- CURTYP
            CALC_CBAL_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- CBAL
            CALC_HOLD_VAL_FUNC(PRE.FROM_DATE, V_TODAY, PRE.LOCKED_AMOUNT), -- HOLD
            NVL(TO_NUMBER(PRE.DRLIMT), 0), -- DRLIMT
            CALC_ACCINT_VAL_FUNC(PRE.CURR_ASSET_TYPE, PRE.OPEN_BALANCE, PRE.CREDIT_MVMT, PRE.DEBIT_MVMT), -- ACCINT
            0, -- COMACC
            0, -- OTHCHG
            AGG.BILPRN, -- BILPRN
            AGG.BILINT, -- BILINT
            0, -- BILESC
            AGG.BILLC, -- BILLC
            0, -- BILOC
            0, -- BILMC
            PRE.WINDOW_ID, -- WINDOW_ID
            PRE.COMMIT_TS, -- COMMIT_TS
            PRE.REPLICAT_TS, -- REPLICAT_TS
            PRE.MAPPED_TS, -- MAPPED_TS
            'ECB' -- CALL_CDC
        FROM PRECOMPUTED PRE
        JOIN AGGREGATED AGG ON AGG.ARRANGEMENT_ID = PRE.ARR_RECID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END GEN_FROM_ECB_PROC;

END T24_LNMEMO_ACTIVITY_PKG;

